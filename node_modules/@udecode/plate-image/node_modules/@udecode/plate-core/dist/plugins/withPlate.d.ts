import { PlateProps } from '../components/Plate';
import { PlateEditor } from '../types/PlateEditor';
import { TEditor } from '../types/slate/TEditor';
export interface WithPlateOptions<T = {}> extends Pick<PlateProps<T>, 'id' | 'disableCorePlugins' | 'plugins'> {
}
/**
 * Apply `withInlineVoid` and all plate plugins `withOverrides`.
 * Overrides:
 * - `id`: id of the editor.
 * - `key`: random key for the <Slate> component so each time the editor is created, the component resets.
 * - `options`: Plate options
 */
export declare const withPlate: <T = {}>(e: TEditor, { id, plugins, disableCorePlugins }?: WithPlateOptions<T>) => PlateEditor<T>;
//# sourceMappingURL=withPlate.d.ts.map