{"version":3,"file":"index.es.js","sources":["../src/defaults.ts","../src/getSearchHighlightDecorate.ts","../src/useFindReplacePlugin.ts"],"sourcesContent":["export const MARK_SEARCH_HIGHLIGHT = 'search_highlight';\n","import { Decorate, getPlatePluginOptions } from '@udecode/plate-core';\nimport { NodeEntry, Range, Text } from 'slate';\nimport { MARK_SEARCH_HIGHLIGHT } from './defaults';\nimport { DecorateSearchHighlightOptions } from './types';\n\nexport const getSearchHighlightDecorate = ({\n  search,\n}: DecorateSearchHighlightOptions): Decorate => (editor) => {\n  const options = getPlatePluginOptions(editor, MARK_SEARCH_HIGHLIGHT);\n\n  return ([node, path]: NodeEntry) => {\n    const ranges: Range[] = [];\n\n    if (search && Text.isText(node)) {\n      const { text } = node;\n      const parts = text.split(search);\n      let offset = 0;\n      parts.forEach((part, i) => {\n        if (i !== 0) {\n          ranges.push({\n            anchor: { path, offset: offset - search.length },\n            focus: { path, offset },\n            [options.type]: true,\n          });\n        }\n        offset = offset + part.length + search.length;\n      });\n    }\n\n    return ranges;\n  };\n};\n","import { Dispatch, SetStateAction, useMemo, useState } from 'react';\nimport { getRenderLeaf, PlatePlugin } from '@udecode/plate-core';\nimport { MARK_SEARCH_HIGHLIGHT } from './defaults';\nimport { getSearchHighlightDecorate } from './getSearchHighlightDecorate';\n\n/**\n * Supports search highlight.\n * TODO: replace\n */\nexport const useFindReplacePlugin = (): {\n  plugin: PlatePlugin;\n  setSearch: Dispatch<SetStateAction<string>>;\n} => {\n  const [search, setSearch] = useState('');\n\n  return {\n    plugin: useMemo(\n      () => ({\n        renderLeaf: getRenderLeaf(MARK_SEARCH_HIGHLIGHT),\n        decorate: getSearchHighlightDecorate({ search }),\n      }),\n      [search]\n    ),\n    setSearch,\n  };\n};\n"],"names":["MARK_SEARCH_HIGHLIGHT","getSearchHighlightDecorate","search","editor","options","getPlatePluginOptions","node","path","ranges","Text","isText","text","parts","split","offset","forEach","part","i","push","anchor","length","focus","type","useFindReplacePlugin","setSearch","useState","plugin","useMemo","renderLeaf","getRenderLeaf","decorate"],"mappings":";;;;MAAaA,qBAAqB,GAAG;;MCKxBC,0BAA0B,GAAG,CAAC;AACzCC,EAAAA;AADyC,CAAD,KAEOC,MAAD,IAAY;AAC1D,QAAMC,OAAO,GAAGC,qBAAqB,CAACF,MAAD,EAASH,qBAAT,CAArC;AAEA,SAAO,CAAC,CAACM,IAAD,EAAOC,IAAP,CAAD,KAA6B;AAClC,UAAMC,MAAe,GAAG,EAAxB;;AAEA,QAAIN,MAAM,IAAIO,IAAI,CAACC,MAAL,CAAYJ,IAAZ,CAAd,EAAiC;AAC/B,YAAM;AAAEK,QAAAA;AAAF,UAAWL,IAAjB;AACA,YAAMM,KAAK,GAAGD,IAAI,CAACE,KAAL,CAAWX,MAAX,CAAd;AACA,UAAIY,MAAM,GAAG,CAAb;AACAF,MAAAA,KAAK,CAACG,OAAN,CAAc,CAACC,IAAD,EAAOC,CAAP,KAAa;AACzB,YAAIA,CAAC,KAAK,CAAV,EAAa;AACXT,UAAAA,MAAM,CAACU,IAAP,CAAY;AACVC,YAAAA,MAAM,EAAE;AAAEZ,cAAAA,IAAF;AAAQO,cAAAA,MAAM,EAAEA,MAAM,GAAGZ,MAAM,CAACkB;AAAhC,aADE;AAEVC,YAAAA,KAAK,EAAE;AAAEd,cAAAA,IAAF;AAAQO,cAAAA;AAAR,aAFG;AAGV,aAACV,OAAO,CAACkB,IAAT,GAAgB;AAHN,WAAZ;AAKD;;AACDR,QAAAA,MAAM,GAAGA,MAAM,GAAGE,IAAI,CAACI,MAAd,GAAuBlB,MAAM,CAACkB,MAAvC;AACD,OATD;AAUD;;AAED,WAAOZ,MAAP;AACD,GApBD;AAqBD;;AC1BD;AACA;AACA;AACA;;MACae,oBAAoB,GAAG,MAG/B;AACH,QAAM,CAACrB,MAAD,EAASsB,SAAT,IAAsBC,QAAQ,CAAC,EAAD,CAApC;AAEA,SAAO;AACLC,IAAAA,MAAM,EAAEC,OAAO,CACb,OAAO;AACLC,MAAAA,UAAU,EAAEC,aAAa,CAAC7B,qBAAD,CADpB;AAEL8B,MAAAA,QAAQ,EAAE7B,0BAA0B,CAAC;AAAEC,QAAAA;AAAF,OAAD;AAF/B,KAAP,CADa,EAKb,CAACA,MAAD,CALa,CADV;AAQLsB,IAAAA;AARK,GAAP;AAUD;;;;"}