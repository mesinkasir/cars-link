{"version":3,"file":"index.es.js","sources":["../../../marks/basic-marks/dist/index.es.js","../src/deserializer/utils/deserializeMD.ts","../src/deserializer/utils/filterBreakLines.ts","../src/deserializer/createDeserializeMDPlugin.ts"],"sourcesContent":["import { getLeafDeserializer, getToggleMarkOnKeyDown } from '@udecode/plate-common';\nimport { getPlatePluginOptions, getRenderLeaf } from '@udecode/plate-core';\n\nconst MARK_BOLD = 'bold';\nconst DEFAULTS_BOLD = {\n  hotkey: 'mod+b'\n};\n\nconst getBoldDeserialize = () => editor => {\n  const options = getPlatePluginOptions(editor, MARK_BOLD);\n  return {\n    leaf: getLeafDeserializer({\n      type: options.type,\n      rules: [{\n        nodeNames: ['STRONG']\n      }, {\n        style: {\n          fontWeight: ['600', '700', 'bold']\n        }\n      }],\n      ...options.deserialize\n    })\n  };\n};\n\n/**\n * Enables support for bold formatting\n */\n\nconst createBoldPlugin = () => ({\n  pluginKeys: MARK_BOLD,\n  renderLeaf: getRenderLeaf(MARK_BOLD),\n  deserialize: getBoldDeserialize(),\n  onKeyDown: getToggleMarkOnKeyDown(MARK_BOLD)\n});\n\nconst MARK_CODE = 'code';\nconst DEFAULTS_CODE = {\n  hotkey: 'mod+e'\n};\n\nconst getCodeDeserialize = () => editor => {\n  const options = getPlatePluginOptions(editor, MARK_CODE);\n  return {\n    leaf: getLeafDeserializer({\n      type: options.type,\n      rules: [{\n        nodeNames: ['CODE']\n      }, {\n        style: {\n          wordWrap: 'break-word'\n        }\n      }],\n      ...options.deserialize\n    })\n  };\n};\n\n/**\n * Enables support for code formatting\n */\n\nconst createCodePlugin = () => ({\n  pluginKeys: MARK_CODE,\n  renderLeaf: getRenderLeaf(MARK_CODE),\n  deserialize: getCodeDeserialize(),\n  onKeyDown: getToggleMarkOnKeyDown(MARK_CODE)\n});\n\nconst MARK_ITALIC = 'italic';\nconst DEFAULTS_ITALIC = {\n  hotkey: 'mod+i'\n};\n\nconst getItalicDeserialize = () => editor => {\n  const options = getPlatePluginOptions(editor, MARK_ITALIC);\n  return {\n    leaf: getLeafDeserializer({\n      type: options.type,\n      rules: [{\n        nodeNames: ['EM', 'I']\n      }, {\n        style: {\n          fontStyle: 'italic'\n        }\n      }],\n      ...options.deserialize\n    })\n  };\n};\n\n/**\n * Enables support for italic formatting.\n */\n\nconst createItalicPlugin = () => ({\n  pluginKeys: MARK_ITALIC,\n  renderLeaf: getRenderLeaf(MARK_ITALIC),\n  deserialize: getItalicDeserialize(),\n  onKeyDown: getToggleMarkOnKeyDown(MARK_ITALIC)\n});\n\nconst MARK_STRIKETHROUGH = 'strikethrough';\nconst DEFAULTS_STRIKETHROUGH = {\n  hotkey: 'mod+shift+s'\n};\n\nconst getStrikethroughDeserialize = () => editor => {\n  const options = getPlatePluginOptions(editor, MARK_STRIKETHROUGH);\n  return {\n    leaf: getLeafDeserializer({\n      type: options.type,\n      rules: [{\n        nodeNames: ['S', 'DEL', 'STRIKE']\n      }, {\n        style: {\n          textDecoration: 'line-through'\n        }\n      }],\n      ...options.deserialize\n    })\n  };\n};\n\n/**\n * Enables support for strikethrough formatting.\n */\n\nconst createStrikethroughPlugin = () => ({\n  pluginKeys: MARK_STRIKETHROUGH,\n  renderLeaf: getRenderLeaf(MARK_STRIKETHROUGH),\n  deserialize: getStrikethroughDeserialize(),\n  onKeyDown: getToggleMarkOnKeyDown(MARK_STRIKETHROUGH)\n});\n\nconst MARK_SUBSCRIPT = 'subscript';\nconst DEFAULTS_SUBSCRIPT = {\n  hotkey: 'mod+.',\n  clear: MARK_SUBSCRIPT\n};\n\nconst getSubscriptDeserialize = () => editor => {\n  const options = getPlatePluginOptions(editor, MARK_SUBSCRIPT);\n  return {\n    leaf: getLeafDeserializer({\n      type: options.type,\n      rules: [{\n        nodeNames: ['SUB']\n      }, {\n        style: {\n          verticalAlign: 'sub'\n        }\n      }],\n      ...options.deserialize\n    })\n  };\n};\n\n/**\n * Enables support for subscript formatting.\n */\n\nconst createSubscriptPlugin = () => ({\n  pluginKeys: MARK_SUBSCRIPT,\n  renderLeaf: getRenderLeaf(MARK_SUBSCRIPT),\n  deserialize: getSubscriptDeserialize(),\n  onKeyDown: getToggleMarkOnKeyDown(MARK_SUBSCRIPT)\n});\n\nconst MARK_SUPERSCRIPT = 'superscript';\nconst DEFAULTS_SUPERSCRIPT = {\n  hotkey: 'mod+,',\n  clear: MARK_SUPERSCRIPT\n};\n\nconst getSuperscriptDeserialize = () => editor => {\n  const options = getPlatePluginOptions(editor, MARK_SUPERSCRIPT);\n  return {\n    leaf: getLeafDeserializer({\n      type: options.type,\n      rules: [{\n        nodeNames: ['SUP']\n      }, {\n        style: {\n          verticalAlign: 'super'\n        }\n      }],\n      ...options.deserialize\n    })\n  };\n};\n\n/**\n * Enables support for superscript formatting.\n */\n\nconst createSuperscriptPlugin = () => ({\n  pluginKeys: MARK_SUPERSCRIPT,\n  renderLeaf: getRenderLeaf(MARK_SUPERSCRIPT),\n  deserialize: getSuperscriptDeserialize(),\n  onKeyDown: getToggleMarkOnKeyDown(MARK_SUPERSCRIPT)\n});\n\nconst MARK_UNDERLINE = 'underline';\nconst DEFAULTS_UNDERLINE = {\n  hotkey: 'mod+u'\n};\n\nconst getUnderlineDeserialize = () => editor => {\n  const options = getPlatePluginOptions(editor, MARK_UNDERLINE);\n  return {\n    leaf: getLeafDeserializer({\n      type: options.type,\n      rules: [{\n        nodeNames: ['U']\n      }, {\n        style: {\n          textDecoration: 'underline'\n        }\n      }],\n      ...options.deserialize\n    })\n  };\n};\n\n/**\n * Enables support for underline formatting.\n */\n\nconst createUnderlinePlugin = () => ({\n  pluginKeys: MARK_UNDERLINE,\n  renderLeaf: getRenderLeaf(MARK_UNDERLINE),\n  deserialize: getUnderlineDeserialize(),\n  onKeyDown: getToggleMarkOnKeyDown(MARK_UNDERLINE)\n});\n\n/**\n * Enables support for basic marks:\n * - Bold\n * - Code\n * - Italic\n * - Strikethrough\n * - Subscript\n * - Superscript\n * - Underline\n */\n\nconst createBasicMarkPlugins = () => [createBoldPlugin(), createCodePlugin(), createItalicPlugin(), createStrikethroughPlugin(), createSubscriptPlugin(), createSuperscriptPlugin(), createUnderlinePlugin()];\n\nexport { DEFAULTS_BOLD, DEFAULTS_CODE, DEFAULTS_ITALIC, DEFAULTS_STRIKETHROUGH, DEFAULTS_SUBSCRIPT, DEFAULTS_SUPERSCRIPT, DEFAULTS_UNDERLINE, MARK_BOLD, MARK_CODE, MARK_ITALIC, MARK_STRIKETHROUGH, MARK_SUBSCRIPT, MARK_SUPERSCRIPT, MARK_UNDERLINE, createBasicMarkPlugins, createBoldPlugin, createCodePlugin, createItalicPlugin, createStrikethroughPlugin, createSubscriptPlugin, createSuperscriptPlugin, createUnderlinePlugin, getBoldDeserialize, getCodeDeserialize, getItalicDeserialize, getStrikethroughDeserialize, getSubscriptDeserialize, getSuperscriptDeserialize, getUnderlineDeserialize };\n//# sourceMappingURL=index.es.js.map\n","import {\n  MARK_BOLD,\n  MARK_CODE,\n  MARK_ITALIC,\n  MARK_STRIKETHROUGH,\n  // MARK_SUBSCRIPT,\n  // MARK_SUPERSCRIPT,\n  // MARK_UNDERLINE,\n} from '@udecode/plate-basic-marks';\nimport { ELEMENT_BLOCKQUOTE } from '@udecode/plate-block-quote';\nimport { ELEMENT_CODE_BLOCK } from '@udecode/plate-code-block';\nimport { getPlatePluginType, PlateEditor } from '@udecode/plate-core';\nimport {\n  ELEMENT_H1,\n  ELEMENT_H2,\n  ELEMENT_H3,\n  ELEMENT_H4,\n  ELEMENT_H5,\n  ELEMENT_H6,\n} from '@udecode/plate-heading';\nimport { ELEMENT_LINK } from '@udecode/plate-link';\nimport { ELEMENT_LI, ELEMENT_OL, ELEMENT_UL } from '@udecode/plate-list';\nimport { ELEMENT_PARAGRAPH } from '@udecode/plate-paragraph';\nimport markdown from 'remark-parse';\nimport slate from 'remark-slate';\nimport unified from 'unified';\n\n/**\n * Deserialize content from Markdown format to Slate format.\n * `editor` needs\n */\nexport const deserializeMD = (editor: PlateEditor, content: string) => {\n  const tree: any = unified()\n    .use(markdown)\n    .use(slate, {\n      nodeTypes: {\n        paragraph: getPlatePluginType(editor, ELEMENT_PARAGRAPH),\n        block_quote: getPlatePluginType(editor, ELEMENT_BLOCKQUOTE),\n        link: getPlatePluginType(editor, ELEMENT_LINK),\n        inline_code_mark: getPlatePluginType(editor, MARK_CODE),\n        emphasis_mark: getPlatePluginType(editor, MARK_ITALIC),\n        strong_mark: getPlatePluginType(editor, MARK_BOLD),\n        delete_mark: getPlatePluginType(editor, MARK_STRIKETHROUGH),\n        // FIXME: underline, subscript superscript not yet supported by remark-slate\n        // underline: getPlatePluginType(editor, MARK_UNDERLINE),\n        // subscript: getPlatePluginType(editor, MARK_SUBSCRIPT),\n        // superscript: getPlatePluginType(editor, MARK_SUPERSCRIPT),\n        code_block: getPlatePluginType(editor, ELEMENT_CODE_BLOCK),\n        ul_list: getPlatePluginType(editor, ELEMENT_UL),\n        ol_list: getPlatePluginType(editor, ELEMENT_OL),\n        listItem: getPlatePluginType(editor, ELEMENT_LI),\n        heading: {\n          1: getPlatePluginType(editor, ELEMENT_H1),\n          2: getPlatePluginType(editor, ELEMENT_H2),\n          3: getPlatePluginType(editor, ELEMENT_H3),\n          4: getPlatePluginType(editor, ELEMENT_H4),\n          5: getPlatePluginType(editor, ELEMENT_H5),\n          6: getPlatePluginType(editor, ELEMENT_H6),\n        },\n      },\n      linkDestinationKey: 'url',\n    })\n    .processSync(content);\n\n  return tree.result;\n};\n","export function filterBreaklines(item: any): boolean {\n  return !item.text;\n}\n","import { isUrl } from '@udecode/plate-common';\nimport {\n  getPlatePluginWithOverrides,\n  PlatePlugin,\n  WithOverride,\n} from '@udecode/plate-core';\nimport {\n  insertDeserializedFragment,\n  isDeserializerEnabled,\n} from '@udecode/plate-serializer';\nimport { deserializeMD } from './utils';\n\nexport interface WithDeserializeMarkdownOptions {\n  plugins?: PlatePlugin[];\n}\n\nexport const mdDeserializerId = 'MD Deserializer';\n\n/**\n * Enables support for deserializing content\n * from Markdown format to Slate format.\n */\nexport const withDeserializeMD = ({\n  plugins = [],\n}: WithDeserializeMarkdownOptions = {}): WithOverride => (editor) => {\n  const { insertData } = editor;\n\n  editor.insertData = (data) => {\n    const content = data.getData('text/plain');\n\n    const isEnabled = isDeserializerEnabled(editor, plugins, mdDeserializerId);\n\n    const { files } = data;\n    if (content && isEnabled && !files?.length) {\n      // if content is simply a URL pass through to not break LinkPlugin\n      if (isUrl(content)) {\n        return insertData(data);\n      }\n\n      const fragment = deserializeMD(editor, content);\n\n      if (fragment.length) {\n        return insertDeserializedFragment(editor, { plugins, fragment });\n      }\n    }\n\n    insertData(data);\n  };\n\n  return editor;\n};\n\n/**\n * @see {@link withDeserializeMd}\n */\nexport const createDeserializeMDPlugin = getPlatePluginWithOverrides(\n  withDeserializeMD\n);\n"],"names":["MARK_BOLD","deserializeMD","editor","content","tree","unified","use","markdown","slate","nodeTypes","paragraph","getPlatePluginType","ELEMENT_PARAGRAPH","block_quote","ELEMENT_BLOCKQUOTE","link","ELEMENT_LINK","inline_code_mark","MARK_CODE","emphasis_mark","MARK_ITALIC","strong_mark","delete_mark","MARK_STRIKETHROUGH","code_block","ELEMENT_CODE_BLOCK","ul_list","ELEMENT_UL","ol_list","ELEMENT_OL","listItem","ELEMENT_LI","heading","ELEMENT_H1","ELEMENT_H2","ELEMENT_H3","ELEMENT_H4","ELEMENT_H5","ELEMENT_H6","linkDestinationKey","processSync","result","filterBreaklines","item","text","mdDeserializerId","withDeserializeMD","plugins","insertData","data","getData","isEnabled","isDeserializerEnabled","files","length","isUrl","fragment","insertDeserializedFragment","createDeserializeMDPlugin","getPlatePluginWithOverrides"],"mappings":"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"}