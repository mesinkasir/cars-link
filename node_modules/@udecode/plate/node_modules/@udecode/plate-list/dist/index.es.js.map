{"version":3,"file":"index.es.js","sources":["../src/defaults.ts","../src/getListDeserialize.ts","../../../../node_modules/lodash/isArray.js","../../../../node_modules/lodash/castArray.js","../../../../node_modules/is-hotkey/lib/index.js","../src/queries/isListNested.ts","../src/queries/getListTypes.ts","../src/queries/getHighestEmptyList.ts","../src/queries/getListItemEntry.ts","../src/queries/getListRoot.ts","../src/queries/hasListChild.ts","../src/queries/isAcrossListItems.ts","../src/transforms/moveListItemDown.ts","../src/transforms/moveListItemsToList.ts","../src/transforms/unwrapList.ts","../src/transforms/moveListItemUp.ts","../src/transforms/moveListItems.ts","../src/transforms/indentListItems.ts","../src/transforms/insertListItem.ts","../src/transforms/moveListItemSublistItemsToListItemSublist.ts","../src/transforms/moveListSiblingsAfterCursor.ts","../src/transforms/removeFirstListItem.ts","../src/transforms/removeListItem.ts","../src/transforms/toggleList.ts","../src/transforms/unindentListItems.ts","../src/getListOnKeyDown.ts","../src/getListDeleteBackward.ts","../src/getListDeleteForward.ts","../src/getListDeleteFragment.ts","../src/getListInsertBreak.ts","../src/getListInsertFragment.ts","../src/normalizers/normalizeListItem.ts","../src/normalizers/normalizeNestedList.ts","../src/normalizers/getListNormalizer.ts","../src/withList.ts","../src/createListPlugin.ts","../src/todo-list/constants.ts","../src/todo-list/defaults.ts","../src/todo-list/getTodoListDeserialize.ts","../src/todo-list/createTodoListPlugin.ts"],"sourcesContent":["export const ELEMENT_UL = 'ul';\nexport const ELEMENT_OL = 'ol';\nexport const ELEMENT_LI = 'li';\nexport const ELEMENT_LIC = 'lic';\n\nexport const KEYS_LIST = [ELEMENT_UL, ELEMENT_OL, ELEMENT_LI, ELEMENT_LIC];\n","import { findNode, getElementDeserializer } from '@udecode/plate-common';\nimport { Deserialize, getPlatePluginOptions } from '@udecode/plate-core';\nimport { ELEMENT_LI, ELEMENT_LIC, ELEMENT_OL, ELEMENT_UL } from './defaults';\n\nexport const getListDeserialize = (): Deserialize => (editor) => {\n  const li = getPlatePluginOptions(editor, ELEMENT_LI);\n  const lic = getPlatePluginOptions(editor, ELEMENT_LIC);\n  const ul = getPlatePluginOptions(editor, ELEMENT_UL);\n  const ol = getPlatePluginOptions(editor, ELEMENT_OL);\n\n  return {\n    element: [\n      ...getElementDeserializer({\n        type: ul.type,\n        rules: [{ nodeNames: 'UL' }],\n        ...ul.deserialize,\n      }),\n      ...getElementDeserializer({\n        type: ol.type,\n        rules: [{ nodeNames: 'OL' }],\n        ...ol.deserialize,\n      }),\n      ...getElementDeserializer({\n        type: li.type,\n        rules: [{ nodeNames: 'LI' }],\n        ...li.deserialize,\n      }),\n      ...getElementDeserializer({\n        type: lic.type,\n        rules: [{ nodeNames: 'LIC' }],\n        ...lic.deserialize,\n      }),\n    ],\n    preInsert: () => {\n      const liEntry = findNode(editor, { match: { type: li.type } });\n\n      if (liEntry) {\n        return true;\n      }\n    },\n  };\n};\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n","var isArray = require('./isArray');\n\n/**\n * Casts `value` as an array if it's not one.\n *\n * @static\n * @memberOf _\n * @since 4.4.0\n * @category Lang\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast array.\n * @example\n *\n * _.castArray(1);\n * // => [1]\n *\n * _.castArray({ 'a': 1 });\n * // => [{ 'a': 1 }]\n *\n * _.castArray('abc');\n * // => ['abc']\n *\n * _.castArray(null);\n * // => [null]\n *\n * _.castArray(undefined);\n * // => [undefined]\n *\n * _.castArray();\n * // => []\n *\n * var array = [1, 2, 3];\n * console.log(_.castArray(array) === array);\n * // => true\n */\nfunction castArray() {\n  if (!arguments.length) {\n    return [];\n  }\n  var value = arguments[0];\n  return isArray(value) ? value : [value];\n}\n\nmodule.exports = castArray;\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n/**\n * Constants.\n */\n\nvar IS_MAC = typeof window != 'undefined' && /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);\n\nvar MODIFIERS = {\n  alt: 'altKey',\n  control: 'ctrlKey',\n  meta: 'metaKey',\n  shift: 'shiftKey'\n};\n\nvar ALIASES = {\n  add: '+',\n  break: 'pause',\n  cmd: 'meta',\n  command: 'meta',\n  ctl: 'control',\n  ctrl: 'control',\n  del: 'delete',\n  down: 'arrowdown',\n  esc: 'escape',\n  ins: 'insert',\n  left: 'arrowleft',\n  mod: IS_MAC ? 'meta' : 'control',\n  opt: 'alt',\n  option: 'alt',\n  return: 'enter',\n  right: 'arrowright',\n  space: ' ',\n  spacebar: ' ',\n  up: 'arrowup',\n  win: 'meta',\n  windows: 'meta'\n};\n\nvar CODES = {\n  backspace: 8,\n  tab: 9,\n  enter: 13,\n  shift: 16,\n  control: 17,\n  alt: 18,\n  pause: 19,\n  capslock: 20,\n  escape: 27,\n  ' ': 32,\n  pageup: 33,\n  pagedown: 34,\n  end: 35,\n  home: 36,\n  arrowleft: 37,\n  arrowup: 38,\n  arrowright: 39,\n  arrowdown: 40,\n  insert: 45,\n  delete: 46,\n  meta: 91,\n  numlock: 144,\n  scrolllock: 145,\n  ';': 186,\n  '=': 187,\n  ',': 188,\n  '-': 189,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '[': 219,\n  '\\\\': 220,\n  ']': 221,\n  '\\'': 222\n};\n\nfor (var f = 1; f < 20; f++) {\n  CODES['f' + f] = 111 + f;\n}\n\n/**\n * Is hotkey?\n */\n\nfunction isHotkey(hotkey, options, event) {\n  if (options && !('byKey' in options)) {\n    event = options;\n    options = null;\n  }\n\n  if (!Array.isArray(hotkey)) {\n    hotkey = [hotkey];\n  }\n\n  var array = hotkey.map(function (string) {\n    return parseHotkey(string, options);\n  });\n  var check = function check(e) {\n    return array.some(function (object) {\n      return compareHotkey(object, e);\n    });\n  };\n  var ret = event == null ? check : check(event);\n  return ret;\n}\n\nfunction isCodeHotkey(hotkey, event) {\n  return isHotkey(hotkey, event);\n}\n\nfunction isKeyHotkey(hotkey, event) {\n  return isHotkey(hotkey, { byKey: true }, event);\n}\n\n/**\n * Parse.\n */\n\nfunction parseHotkey(hotkey, options) {\n  var byKey = options && options.byKey;\n  var ret = {};\n\n  // Special case to handle the `+` key since we use it as a separator.\n  hotkey = hotkey.replace('++', '+add');\n  var values = hotkey.split('+');\n  var length = values.length;\n\n  // Ensure that all the modifiers are set to false unless the hotkey has them.\n\n  for (var k in MODIFIERS) {\n    ret[MODIFIERS[k]] = false;\n  }\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var value = _step.value;\n\n      var optional = value.endsWith('?') && value.length > 1;\n\n      if (optional) {\n        value = value.slice(0, -1);\n      }\n\n      var name = toKeyName(value);\n      var modifier = MODIFIERS[name];\n\n      if (length === 1 || !modifier) {\n        if (byKey) {\n          ret.key = name;\n        } else {\n          ret.which = toKeyCode(value);\n        }\n      }\n\n      if (modifier) {\n        ret[modifier] = optional ? null : true;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return ret;\n}\n\n/**\n * Compare.\n */\n\nfunction compareHotkey(object, event) {\n  for (var key in object) {\n    var expected = object[key];\n    var actual = void 0;\n\n    if (expected == null) {\n      continue;\n    }\n\n    if (key === 'key' && event.key != null) {\n      actual = event.key.toLowerCase();\n    } else if (key === 'which') {\n      actual = expected === 91 && event.which === 93 ? 91 : event.which;\n    } else {\n      actual = event[key];\n    }\n\n    if (actual == null && expected === false) {\n      continue;\n    }\n\n    if (actual !== expected) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Utils.\n */\n\nfunction toKeyCode(name) {\n  name = toKeyName(name);\n  var code = CODES[name] || name.toUpperCase().charCodeAt(0);\n  return code;\n}\n\nfunction toKeyName(name) {\n  name = name.toLowerCase();\n  name = ALIASES[name] || name;\n  return name;\n}\n\n/**\n * Export.\n */\n\nexports.default = isHotkey;\nexports.isHotkey = isHotkey;\nexports.isCodeHotkey = isCodeHotkey;\nexports.isKeyHotkey = isKeyHotkey;\nexports.parseHotkey = parseHotkey;\nexports.compareHotkey = compareHotkey;\nexports.toKeyCode = toKeyCode;\nexports.toKeyName = toKeyName;","import { getParent } from '@udecode/plate-common';\nimport { getPlatePluginType, PlateEditor, TElement } from '@udecode/plate-core';\nimport { Path } from 'slate';\nimport { ELEMENT_LI } from '../defaults';\n\n/**\n * Is the list nested, i.e. its parent is a list item.\n */\nexport const isListNested = (editor: PlateEditor, listPath: Path) => {\n  const listParentNode = getParent<TElement>(editor, listPath)?.[0];\n\n  return listParentNode?.type === getPlatePluginType(editor, ELEMENT_LI);\n};\n","import { getPlatePluginType, PlateEditor } from '@udecode/plate-core';\nimport { ELEMENT_OL, ELEMENT_UL } from '../defaults';\n\nexport const getListTypes = (editor: PlateEditor) => {\n  return [\n    getPlatePluginType(editor, ELEMENT_OL),\n    getPlatePluginType(editor, ELEMENT_UL),\n  ];\n};\n","import { getAbove } from '@udecode/plate-common';\nimport { getPlatePluginType, PlateEditor } from '@udecode/plate-core';\nimport { Path } from 'slate';\nimport { ELEMENT_LI } from '../defaults';\nimport { getListTypes } from './getListTypes';\n\n/**\n * Find the highest end list that can be deleted.\n * Its path should be different to diffListPath.\n * If the highest end list 2+ items, return liPath.\n * Get the parent list until:\n * - the list has less than 2 items.\n * - its path is not equals to diffListPath.\n */\nexport const getHighestEmptyList = (\n  editor: PlateEditor,\n  {\n    diffListPath,\n    liPath,\n  }: {\n    liPath: Path;\n    diffListPath?: Path;\n  }\n): Path | undefined => {\n  const list = getAbove(editor, {\n    at: liPath,\n    match: { type: getListTypes(editor) },\n  });\n  if (!list) return;\n  const [listNode, listPath] = list;\n\n  if (!diffListPath || !Path.equals(listPath, diffListPath)) {\n    if (listNode.children.length < 2) {\n      const liParent = getAbove(editor, {\n        at: listPath,\n        match: { type: getPlatePluginType(editor, ELEMENT_LI) },\n      });\n\n      if (liParent) {\n        return (\n          getHighestEmptyList(editor, { liPath: liParent[1], diffListPath }) ||\n          listPath\n        );\n      }\n    }\n    return liPath;\n  }\n};\n","import {\n  getAbove,\n  getNode,\n  getParent,\n  isCollapsed,\n} from '@udecode/plate-common';\nimport { getPlatePluginType, PlateEditor, TElement } from '@udecode/plate-core';\nimport { Location, NodeEntry, Path, Range } from 'slate';\nimport { ELEMENT_LI } from '../defaults';\n\n/**\n * Returns the nearest li and ul / ol wrapping node entries for a given path (default = selection)\n */\nexport const getListItemEntry = (\n  editor: PlateEditor,\n  { at = editor.selection }: { at?: Location | null } = {}\n): { list: NodeEntry<TElement>; listItem: NodeEntry<TElement> } | undefined => {\n  const liType = getPlatePluginType(editor, ELEMENT_LI);\n\n  let _at: Path;\n\n  if (Range.isRange(at) && !isCollapsed(at)) {\n    _at = at.focus.path;\n  } else if (Range.isRange(at)) {\n    _at = at.anchor.path;\n  } else {\n    _at = at as Path;\n  }\n\n  if (_at) {\n    const node = getNode(editor, _at) as TElement;\n    if (node) {\n      const listItem = getAbove(editor, {\n        at: _at,\n        match: { type: liType },\n      }) as NodeEntry<TElement>;\n\n      if (listItem) {\n        const list = getParent(editor, listItem[1]) as NodeEntry<TElement>;\n\n        return { list, listItem };\n      }\n    }\n  }\n};\n","import { getAbove } from '@udecode/plate-common';\nimport { getPlatePluginType, PlateEditor } from '@udecode/plate-core';\nimport { Ancestor, NodeEntry, Path, Point, Range } from 'slate';\nimport { ELEMENT_OL, ELEMENT_UL } from '../defaults';\n\n/**\n * Searches upward for the root list element\n */\nexport const getListRoot = (\n  editor: PlateEditor,\n  at: Path | Range | Point | null = editor.selection\n): NodeEntry<Ancestor> | undefined => {\n  if (!at) return;\n\n  const parentList = getAbove(editor, {\n    at,\n    match: {\n      type: [\n        getPlatePluginType(editor, ELEMENT_UL),\n        getPlatePluginType(editor, ELEMENT_OL),\n      ],\n    },\n  });\n\n  if (parentList) {\n    const [, parentListPath] = parentList;\n\n    return getListRoot(editor, parentListPath) ?? parentList;\n  }\n};\n","import { match } from '@udecode/plate-common';\nimport { PlateEditor } from '@udecode/plate-core';\nimport { Ancestor } from 'slate';\nimport { getListTypes } from './getListTypes';\n\n/**\n * Is there a list child in the node.\n */\nexport const hasListChild = (editor: PlateEditor, node: Ancestor) =>\n  node.children.some((n) => match(n, { type: getListTypes(editor) }));\n","import {\n  isCollapsed,\n  isRangeAcrossBlocks,\n  someNode,\n} from '@udecode/plate-common';\nimport { getPlatePluginType, PlateEditor } from '@udecode/plate-core';\nimport { ELEMENT_LI } from '../defaults';\n\n/**\n * Is selection across blocks with list items\n */\nexport const isAcrossListItems = (editor: PlateEditor) => {\n  const { selection } = editor;\n\n  if (!selection || isCollapsed(selection)) {\n    return false;\n  }\n\n  const isAcrossBlocks = isRangeAcrossBlocks(editor);\n  if (!isAcrossBlocks) return false;\n\n  return someNode(editor, {\n    match: { type: getPlatePluginType(editor, ELEMENT_LI) },\n  });\n};\n","import { match, wrapNodes } from '@udecode/plate-common';\nimport { PlateEditor, TElement } from '@udecode/plate-core';\nimport { Ancestor, Editor, Element, NodeEntry, Path, Transforms } from 'slate';\nimport { getListTypes } from '../queries';\n\nexport interface MoveListItemDownOptions {\n  list: NodeEntry<TElement>;\n  listItem: NodeEntry<TElement>;\n}\n\nexport const moveListItemDown = (\n  editor: PlateEditor,\n  { list, listItem }: MoveListItemDownOptions\n) => {\n  const [listNode] = list;\n  const [, listItemPath] = listItem;\n\n  let previousListItemPath: Path;\n\n  try {\n    previousListItemPath = Path.previous(listItemPath);\n  } catch (e) {\n    return;\n  }\n\n  // Previous sibling is the new parent\n  const previousSiblingItem = Editor.node(\n    editor,\n    previousListItemPath\n  ) as NodeEntry<Ancestor>;\n\n  if (previousSiblingItem) {\n    const [previousNode, previousPath] = previousSiblingItem;\n\n    const sublist = previousNode.children.find((n) =>\n      match(n, { type: getListTypes(editor) })\n    ) as Element | undefined;\n    const newPath = previousPath.concat(\n      sublist ? [1, sublist.children.length] : [1]\n    );\n\n    Editor.withoutNormalizing(editor, () => {\n      if (!sublist) {\n        // Create new sublist\n        wrapNodes(\n          editor,\n          { type: listNode.type, children: [] },\n          { at: listItemPath }\n        );\n      }\n\n      // Move the current item to the sublist\n      Transforms.moveNodes(editor, {\n        at: listItemPath,\n        to: newPath,\n      });\n    });\n  }\n};\n","import {\n  findDescendant,\n  getLastChildPath,\n  moveChildren,\n  MoveChildrenOptions,\n} from '@udecode/plate-common';\nimport { PlateEditor, TElement } from '@udecode/plate-core';\nimport { Editor, NodeEntry, Path, Transforms } from 'slate';\nimport { getListTypes } from '../queries/getListTypes';\n\nexport interface MergeListItemIntoListOptions {\n  /**\n   * List items of the sublist of this node will be moved.\n   */\n  fromListItem?: NodeEntry<TElement>;\n\n  /**\n   * List items of the list will be moved.\n   */\n  fromList?: NodeEntry<TElement>;\n\n  /**\n   * List items will be moved in this list.\n   */\n  toList?: NodeEntry<TElement>;\n\n  fromStartIndex?: MoveChildrenOptions['fromStartIndex'];\n\n  /**\n   * List position where to move the list items.\n   */\n  toListIndex?: number | null;\n\n  to?: Path;\n\n  /**\n   * Delete `fromListItem` sublist if true.\n   * @default true\n   */\n  deleteFromList?: boolean;\n}\n\n/**\n * Move the list items of the sublist of `fromListItem` to `toList` (if `fromListItem` is defined).\n * Move the list items of `fromList` to `toList` (if `fromList` is defined).\n */\nexport const moveListItemsToList = (\n  editor: PlateEditor,\n  {\n    fromList,\n    fromListItem,\n    fromStartIndex,\n    to: _to,\n    toList,\n    toListIndex = null,\n    deleteFromList = true,\n  }: MergeListItemIntoListOptions\n) => {\n  let fromListPath: Path | undefined;\n  let moved;\n\n  Editor.withoutNormalizing(editor, () => {\n    if (fromListItem) {\n      const fromListItemSublist = findDescendant(editor, {\n        at: fromListItem[1],\n        match: {\n          type: getListTypes(editor),\n        },\n      });\n      if (!fromListItemSublist) return 0;\n\n      fromListPath = fromListItemSublist?.[1];\n    } else if (fromList) {\n      // eslint-disable-next-line prefer-destructuring\n      fromListPath = fromList[1];\n    } else {\n      return;\n    }\n\n    let to: Path | null = null;\n\n    if (_to) to = _to;\n    if (toList) {\n      if (toListIndex !== null) to = toList[1].concat([toListIndex]);\n      else {\n        const lastChildPath = getLastChildPath(toList);\n        to = Path.next(lastChildPath);\n      }\n    }\n    if (!to) return;\n\n    moved = moveChildren(editor, {\n      at: fromListPath,\n      to,\n      fromStartIndex,\n    });\n\n    // Remove the empty list\n    if (deleteFromList) {\n      Transforms.delete(editor, { at: fromListPath });\n    }\n  });\n\n  return moved;\n};\n","import {\n  ELEMENT_DEFAULT,\n  getAbove,\n  setNodes,\n  unwrapNodes,\n} from '@udecode/plate-common';\nimport { getPlatePluginType, PlateEditor } from '@udecode/plate-core';\nimport { Editor, Path } from 'slate';\nimport { ELEMENT_LI, ELEMENT_OL, ELEMENT_UL } from '../defaults';\nimport { getListTypes } from '../queries';\n\nexport const unwrapList = (editor: PlateEditor, { at }: { at?: Path } = {}) => {\n  Editor.withoutNormalizing(editor, () => {\n    do {\n      setNodes(editor, {\n        type: getPlatePluginType(editor, ELEMENT_DEFAULT),\n      });\n\n      unwrapNodes(editor, {\n        at,\n        match: { type: getPlatePluginType(editor, ELEMENT_LI) },\n        split: true,\n      });\n\n      unwrapNodes(editor, {\n        at,\n        match: {\n          type: [\n            getPlatePluginType(editor, ELEMENT_UL),\n            getPlatePluginType(editor, ELEMENT_OL),\n          ],\n        },\n        split: true,\n      });\n    } while (getAbove(editor, { match: { type: getListTypes(editor), at } }));\n  });\n};\n","import {\n  getAbove,\n  getNode,\n  insertNodes,\n  isLastChild,\n} from '@udecode/plate-common';\nimport { getPlatePluginType, PlateEditor, TElement } from '@udecode/plate-core';\nimport { Editor, NodeEntry, Path, Transforms } from 'slate';\nimport { ELEMENT_LI } from '../defaults';\nimport { hasListChild } from '../queries/hasListChild';\nimport { moveListItemsToList } from './moveListItemsToList';\nimport { unwrapList } from './unwrapList';\n\nexport interface MoveListItemUpOptions {\n  list: NodeEntry<TElement>;\n  listItem: NodeEntry<TElement>;\n}\n\n/**\n * Move a list item up.\n */\nexport const moveListItemUp = (\n  editor: PlateEditor,\n  { list, listItem }: MoveListItemUpOptions\n) => {\n  const move = () => {\n    const [listNode, listPath] = list;\n    const [liNode, liPath] = listItem;\n\n    const liParent = getAbove<TElement>(editor, {\n      at: listPath,\n      match: { type: getPlatePluginType(editor, ELEMENT_LI) },\n    });\n    if (!liParent) {\n      let toListPath;\n      try {\n        toListPath = Path.next(listPath);\n      } catch (err) {\n        return;\n      }\n\n      const condA = hasListChild(editor, liNode);\n      const condB = !isLastChild(list, liPath);\n\n      if (condA || condB) {\n        // Insert a new list next to `list`\n        insertNodes<TElement>(\n          editor,\n          {\n            type: listNode.type,\n            children: [],\n          },\n          { at: toListPath }\n        );\n      }\n\n      if (condA) {\n        const toListNode = getNode<TElement>(editor, toListPath);\n        if (!toListNode) return;\n\n        // Move li sub-lis to the new list\n        moveListItemsToList(editor, {\n          fromListItem: listItem,\n          toList: [toListNode, toListPath],\n        });\n      }\n\n      // If there is siblings li, move them to the new list\n      if (condB) {\n        const toListNode = getNode<TElement>(editor, toListPath);\n        if (!toListNode) return;\n\n        // Move next lis to the new list\n        moveListItemsToList(editor, {\n          fromList: list,\n          fromStartIndex: liPath[liPath.length - 1] + 1,\n          toList: [toListNode, toListPath],\n          deleteFromList: false,\n        });\n      }\n\n      // Finally, unwrap the list\n      unwrapList(editor, { at: liPath.concat(0) });\n\n      return true;\n    }\n    const [, liParentPath] = liParent;\n\n    const toListPath = liPath.concat([1]);\n\n    // If li has next siblings, we need to move them.\n    if (!isLastChild(list, liPath)) {\n      // If li has no sublist, insert one.\n      if (!hasListChild(editor, liNode)) {\n        insertNodes<TElement>(\n          editor,\n          {\n            type: listNode.type,\n            children: [],\n          },\n          { at: toListPath }\n        );\n      }\n\n      const toListNode = getNode<TElement>(editor, toListPath);\n      if (!toListNode) return;\n\n      // Move next siblings to li sublist.\n      moveListItemsToList(editor, {\n        fromListItem: liParent,\n        toList: [toListNode, toListPath],\n        fromStartIndex: liPath[liPath.length - 1] + 1,\n        deleteFromList: false,\n      });\n    }\n\n    const movedUpLiPath = Path.next(liParentPath);\n\n    // Move li one level up: next to the li parent.\n    Transforms.moveNodes(editor, {\n      at: liPath,\n      to: movedUpLiPath,\n    });\n\n    return true;\n  };\n\n  let moved: boolean | undefined = false;\n\n  Editor.withoutNormalizing(editor, () => {\n    moved = move();\n  });\n\n  return moved;\n};\n","import { getNodes, getParent } from '@udecode/plate-common';\nimport { EditorNodesOptions } from '@udecode/plate-common/src';\nimport { getPlatePluginType, PlateEditor } from '@udecode/plate-core';\nimport { Editor, Path, PathRef } from 'slate';\nimport { ELEMENT_LIC } from '../defaults';\nimport { isListNested } from '../queries/isListNested';\nimport { moveListItemDown } from './moveListItemDown';\nimport { moveListItemUp } from './moveListItemUp';\n\nexport type MoveListItemsOptions = {\n  increase?: boolean;\n  at?: EditorNodesOptions['at'];\n};\n\nexport const moveListItems = (\n  editor: PlateEditor,\n  {\n    increase = true,\n    at = editor.selection ?? undefined,\n  }: MoveListItemsOptions = {}\n) => {\n  // Get the selected lic\n  const [...lics] = getNodes(editor, {\n    at,\n    match: {\n      type: getPlatePluginType(editor, ELEMENT_LIC),\n    },\n  });\n\n  if (!lics.length) return;\n\n  const highestLicPaths: Path[] = [];\n  const highestLicPathRefs: PathRef[] = [];\n\n  // Filter out the nested lic, we just need to move the highest ones\n  lics.forEach((lic) => {\n    const licPath = lic[1];\n    const liPath = Path.parent(licPath);\n\n    const isAncestor = highestLicPaths.some((path) => {\n      const highestLiPath = Path.parent(path);\n\n      return Path.isAncestor(highestLiPath, liPath);\n    });\n    if (!isAncestor) {\n      highestLicPaths.push(licPath);\n      highestLicPathRefs.push(Editor.pathRef(editor, licPath));\n    }\n  });\n\n  const licPathRefsToMove = increase\n    ? highestLicPathRefs\n    : highestLicPathRefs.reverse();\n\n  Editor.withoutNormalizing(editor, () => {\n    licPathRefsToMove.forEach((licPathRef) => {\n      const licPath = licPathRef.unref();\n      if (!licPath) return;\n\n      const listItem = getParent(editor, licPath);\n      if (!listItem) return;\n      const listEntry = getParent(editor, listItem[1]);\n\n      if (increase) {\n        moveListItemDown(editor, {\n          list: listEntry as any,\n          listItem: listItem as any,\n        });\n      } else if (listEntry && isListNested(editor, listEntry[1])) {\n        moveListItemUp(editor, {\n          list: listEntry as any,\n          listItem: listItem as any,\n        });\n      }\n    });\n  });\n};\n","import { PlateEditor } from '@udecode/plate-core';\nimport { moveListItems } from './moveListItems';\n\nexport const indentListItems = (editor: PlateEditor) => {\n  moveListItems(editor, { increase: true });\n};\n","import {\n  getAbove,\n  getParent,\n  insertNodes,\n  isBlockTextEmptyAfterSelection,\n  wrapNodes,\n} from '@udecode/plate-common';\nimport { getPlatePluginType, PlateEditor, TElement } from '@udecode/plate-core';\nimport { Editor, Path, Range, Transforms } from 'slate';\nimport { ELEMENT_LI, ELEMENT_LIC } from '../defaults';\n\n/**\n * Insert list item if selection in li>p.\n * TODO: test\n */\nexport const insertListItem = (editor: PlateEditor): boolean => {\n  const liType = getPlatePluginType(editor, ELEMENT_LI);\n  const licType = getPlatePluginType(editor, ELEMENT_LIC);\n\n  if (!editor.selection) {\n    return false;\n  }\n\n  const licEntry = getAbove(editor, { match: { type: licType } });\n  if (!licEntry) return false;\n  const [, paragraphPath] = licEntry;\n\n  const listItemEntry = getParent(editor, paragraphPath);\n  if (!listItemEntry) return false;\n  const [listItemNode, listItemPath] = listItemEntry;\n\n  if (listItemNode.type !== liType) return false;\n\n  let success = false;\n\n  Editor.withoutNormalizing(editor, () => {\n    if (!Range.isCollapsed(editor.selection!)) {\n      Transforms.delete(editor);\n    }\n\n    const isStart = Editor.isStart(\n      editor,\n      editor.selection!.focus,\n      paragraphPath\n    );\n    const isEnd = isBlockTextEmptyAfterSelection(editor);\n\n    const nextParagraphPath = Path.next(paragraphPath);\n    const nextListItemPath = Path.next(listItemPath);\n\n    /**\n     * If start, insert a list item before\n     */\n    if (isStart) {\n      insertNodes<TElement>(\n        editor,\n        {\n          type: liType,\n          children: [{ type: licType, children: [{ text: '' }] }],\n        },\n        { at: listItemPath }\n      );\n\n      success = true;\n\n      return;\n    }\n\n    /**\n     * If not end, split nodes, wrap a list item on the new paragraph and move it to the next list item\n     */\n    if (!isEnd) {\n      Editor.withoutNormalizing(editor, () => {\n        Transforms.splitNodes(editor);\n        wrapNodes(\n          editor,\n          {\n            type: liType,\n            children: [],\n          },\n          { at: nextParagraphPath }\n        );\n        Transforms.moveNodes(editor, {\n          at: nextParagraphPath,\n          to: nextListItemPath,\n        });\n        Transforms.select(editor, nextListItemPath);\n        Transforms.collapse(editor, {\n          edge: 'start',\n        });\n      });\n    } else {\n      /**\n       * If end, insert a list item after and select it\n       */\n      const marks = Editor.marks(editor) || {};\n      insertNodes<TElement>(\n        editor,\n        {\n          type: liType,\n          children: [{ type: licType, children: [{ text: '', ...marks }] }],\n        },\n        { at: nextListItemPath }\n      );\n      Transforms.select(editor, nextListItemPath);\n    }\n\n    /**\n     * If there is a list in the list item, move it to the next list item\n     */\n    if (listItemNode.children.length > 1) {\n      Transforms.moveNodes(editor, {\n        at: nextParagraphPath,\n        to: nextListItemPath.concat(1),\n      });\n    }\n\n    success = true;\n  });\n\n  return success;\n};\n","import {\n  findDescendant,\n  getLastChildPath,\n  getParent,\n  insertNodes,\n  moveChildren,\n} from '@udecode/plate-common';\nimport { PlateEditor, TElement } from '@udecode/plate-core';\nimport { Editor, NodeEntry, Path, Transforms } from 'slate';\nimport { getListTypes } from '../queries/getListTypes';\n\nexport interface MoveListItemSublistItemsToListItemSublistOptions {\n  /**\n   * The list item to merge.\n   */\n  fromListItem: NodeEntry<TElement>;\n\n  /**\n   * The list item where to merge.\n   */\n  toListItem: NodeEntry<TElement>;\n\n  /**\n   * Move to the start of the list instead of the end.\n   */\n  start?: boolean;\n}\n\n/**\n * Move fromListItem sublist list items to the end of `toListItem` sublist.\n * If there is no `toListItem` sublist, insert one.\n */\nexport const moveListItemSublistItemsToListItemSublist = (\n  editor: PlateEditor,\n  {\n    fromListItem,\n    toListItem,\n    start,\n  }: MoveListItemSublistItemsToListItemSublistOptions\n) => {\n  const [, fromListItemPath] = fromListItem;\n  const [, toListItemPath] = toListItem;\n  let moved = 0;\n\n  Editor.withoutNormalizing(editor, () => {\n    const fromListItemSublist = findDescendant<TElement>(editor, {\n      at: fromListItemPath,\n      match: {\n        type: getListTypes(editor),\n      },\n    });\n    if (!fromListItemSublist) return 0;\n\n    const [, fromListItemSublistPath] = fromListItemSublist;\n\n    const toListItemSublist = findDescendant<TElement>(editor, {\n      at: toListItemPath,\n      match: {\n        type: getListTypes(editor),\n      },\n    });\n\n    let to: Path;\n\n    if (!toListItemSublist) {\n      const fromList = getParent(editor, fromListItemPath);\n      if (!fromList) return 0;\n      const [fromListNode] = fromList;\n\n      const fromListType = fromListNode.type;\n\n      const toListItemSublistPath = toListItemPath.concat([1]);\n\n      insertNodes<TElement>(\n        editor,\n        { type: fromListType, children: [] },\n        { at: toListItemSublistPath }\n      );\n\n      to = toListItemSublistPath.concat([0]);\n    } else if (start) {\n      const [, toListItemSublistPath] = toListItemSublist;\n      to = toListItemSublistPath.concat([0]);\n    } else {\n      to = Path.next(getLastChildPath(toListItemSublist));\n    }\n\n    moved = moveChildren(editor, {\n      at: fromListItemSublistPath,\n      to,\n    });\n\n    // Remove the empty list\n    Transforms.delete(editor, { at: fromListItemSublistPath });\n  });\n\n  return moved;\n};\n","import { match, moveChildren } from '@udecode/plate-common';\nimport { PlateEditor } from '@udecode/plate-core';\nimport { Node, NodeEntry, Path } from 'slate';\nimport { getListTypes } from '../queries/getListTypes';\n\nexport const moveListSiblingsAfterCursor = (\n  editor: PlateEditor,\n  {\n    at,\n    to,\n  }: {\n    at: Path;\n    to: Path;\n  }\n): number => {\n  const offset = at[at.length - 1];\n  at = Path.parent(at);\n  const listNode = Node.get(editor, at);\n  const listEntry: NodeEntry = [listNode, at];\n\n  if (\n    !match(listNode, { type: getListTypes(editor) }) ||\n    Path.isParent(at, to) // avoid moving nodes within its own list\n  ) {\n    return 0;\n  }\n\n  return moveChildren(editor, {\n    at: listEntry,\n    to,\n    fromStartIndex: offset + 1,\n  });\n};\n","import { isFirstChild } from '@udecode/plate-common';\nimport { PlateEditor, TElement } from '@udecode/plate-core';\nimport { NodeEntry } from 'slate';\nimport { isListNested } from '../queries/isListNested';\nimport { moveListItemUp } from './moveListItemUp';\n\n/**\n * If list is not nested and if li is not the first child, move li up.\n */\nexport const removeFirstListItem = (\n  editor: PlateEditor,\n  {\n    list,\n    listItem,\n  }: {\n    list: NodeEntry<TElement>;\n    listItem: NodeEntry<TElement>;\n  }\n) => {\n  const [, listPath] = list;\n  const [, listItemPath] = listItem;\n\n  if (!isListNested(editor, listPath) && !isFirstChild(listItemPath)) {\n    moveListItemUp(editor, { list, listItem });\n\n    return true;\n  }\n\n  return false;\n};\n","import {\n  deleteFragment,\n  getPreviousPath,\n  insertNodes,\n  isExpanded,\n} from '@udecode/plate-common';\nimport { getPlatePluginType, PlateEditor, TElement } from '@udecode/plate-core';\nimport { Editor, NodeEntry, Path, Transforms } from 'slate';\nimport { ELEMENT_LI, ELEMENT_LIC } from '../defaults';\nimport { hasListChild } from '../queries/hasListChild';\nimport { moveListItemsToList } from './moveListItemsToList';\nimport { moveListItemSublistItemsToListItemSublist } from './moveListItemSublistItemsToListItemSublist';\n\nexport interface RemoveListItemOptions {\n  list: NodeEntry<TElement>;\n  listItem: NodeEntry<TElement>;\n  reverse?: boolean;\n}\n\n/**\n * Remove list item and move its sublist to list if any.\n */\nexport const removeListItem = (\n  editor: PlateEditor,\n  { list, listItem, reverse = true }: RemoveListItemOptions\n) => {\n  const [liNode, liPath] = listItem;\n\n  // Stop if the list item has no sublist\n  if (isExpanded(editor.selection) || !hasListChild(editor, liNode)) {\n    return false;\n  }\n\n  const previousLiPath = getPreviousPath(liPath);\n\n  let success = false;\n\n  Editor.withoutNormalizing(editor, () => {\n    /**\n     * If there is a previous li, we need to move sub-lis to the previous li.\n     * As we need to delete first, we will:\n     * 1. insert a temporary li: tempLi\n     * 2. move sub-lis to tempLi\n     * 3. delete\n     * 4. move sub-lis from tempLi to the previous li.\n     * 5. remove tempLi\n     */\n    if (previousLiPath) {\n      const previousLi = Editor.node(\n        editor,\n        previousLiPath\n      ) as NodeEntry<TElement>;\n\n      // 1\n      let tempLiPath = Path.next(liPath);\n      insertNodes<TElement>(\n        editor,\n        {\n          type: getPlatePluginType(editor, ELEMENT_LI),\n          children: [\n            {\n              type: getPlatePluginType(editor, ELEMENT_LIC),\n              children: [{ text: '' }],\n            },\n          ],\n        },\n        { at: tempLiPath }\n      );\n\n      const tempLi = Editor.node(editor, tempLiPath) as NodeEntry<TElement>;\n      const tempLiPathRef = Editor.pathRef(editor, tempLi[1]);\n\n      // 2\n      moveListItemSublistItemsToListItemSublist(editor, {\n        fromListItem: listItem,\n        toListItem: tempLi,\n      });\n\n      // 3\n      deleteFragment(editor, {\n        reverse,\n      });\n\n      tempLiPath = tempLiPathRef.unref()!;\n\n      // 4\n      moveListItemSublistItemsToListItemSublist(editor, {\n        fromListItem: [tempLi[0], tempLiPath],\n        toListItem: previousLi,\n      });\n\n      // 5\n      Transforms.removeNodes(editor, { at: tempLiPath });\n\n      success = true;\n      return;\n    }\n\n    // If it's the first li, move the sublist to the parent list\n    moveListItemsToList(editor, {\n      fromListItem: listItem,\n      toList: list,\n      toListIndex: 1,\n    });\n  });\n\n  return success;\n};\n","import {\n  ELEMENT_DEFAULT,\n  findNode,\n  getNodes,\n  isCollapsed,\n  isRangeAcrossBlocks,\n  setNodes,\n  wrapNodes,\n} from '@udecode/plate-common';\nimport { getPlatePluginType, PlateEditor, TElement } from '@udecode/plate-core';\nimport { Editor, Node, NodeEntry, Range } from 'slate';\nimport { ELEMENT_LI, ELEMENT_LIC } from '../defaults';\nimport { getListItemEntry, getListTypes } from '../queries';\nimport { unwrapList } from './unwrapList';\n\nexport const toggleList = (editor: PlateEditor, { type }: { type: string }) =>\n  Editor.withoutNormalizing(editor, () => {\n    if (!editor.selection) {\n      return;\n    }\n\n    if (isCollapsed(editor.selection) || !isRangeAcrossBlocks(editor)) {\n      // selection is collapsed\n      const res = getListItemEntry(editor);\n\n      if (res) {\n        const { list } = res;\n        if (list[0].type !== type) {\n          setNodes(\n            editor,\n            { type },\n            {\n              at: editor.selection,\n              match: (n) => getListTypes(editor).includes(n.type),\n              mode: 'lowest',\n            }\n          );\n        } else {\n          unwrapList(editor);\n        }\n      } else {\n        const list = { type, children: [] };\n        wrapNodes(editor, list);\n\n        const nodes = [\n          ...getNodes(editor, {\n            match: { type: getPlatePluginType(editor, ELEMENT_DEFAULT) },\n          }),\n        ];\n        setNodes(editor, { type: getPlatePluginType(editor, ELEMENT_LIC) });\n\n        const listItem = {\n          type: getPlatePluginType(editor, ELEMENT_LI),\n          children: [],\n        };\n\n        for (const [, path] of nodes) {\n          wrapNodes(editor, listItem, {\n            at: path,\n          });\n        }\n      }\n    } else {\n      // selection is a range\n\n      const [startPoint, endPoint] = Range.edges(editor.selection!);\n      const commonEntry = Node.common(editor, startPoint.path, endPoint.path);\n\n      if (\n        getListTypes(editor).includes((commonEntry[0] as TElement).type) ||\n        (commonEntry[0] as TElement).type ===\n          getPlatePluginType(editor, ELEMENT_LI)\n      ) {\n        if ((commonEntry[0] as TElement).type !== type) {\n          const startList = findNode(editor, {\n            at: Range.start(editor.selection),\n            match: { type: getListTypes(editor) },\n            mode: 'lowest',\n          });\n          const endList = findNode(editor, {\n            at: Range.end(editor.selection),\n            match: { type: getListTypes(editor) },\n            mode: 'lowest',\n          });\n          const rangeLength = Math.min(\n            startList![1].length,\n            endList![1].length\n          );\n          setNodes(\n            editor,\n            { type },\n            {\n              at: editor.selection,\n              match: (n, path) =>\n                getListTypes(editor).includes(n.type) &&\n                path.length >= rangeLength,\n              mode: 'all',\n            }\n          );\n        } else {\n          unwrapList(editor);\n        }\n      } else {\n        const rootPathLength = commonEntry[1].length;\n        const nodes = (Array.from(\n          getNodes(editor, {\n            mode: 'all',\n          })\n        ) as NodeEntry<TElement>[])\n          .filter(([, path]) => path.length === rootPathLength + 1)\n          .reverse();\n\n        nodes.forEach((n) => {\n          if (getListTypes(editor).includes(n[0].type)) {\n            setNodes(editor, { type }, { at: n[1] });\n          } else {\n            setNodes(\n              editor,\n              { type: getPlatePluginType(editor, ELEMENT_LIC) },\n              { at: n[1] }\n            );\n\n            const listItem = {\n              type: getPlatePluginType(editor, ELEMENT_LI),\n              children: [],\n            };\n            wrapNodes(editor, listItem, {\n              at: n[1],\n            });\n\n            const list = { type, children: [] };\n            wrapNodes(editor, list, { at: n[1] });\n          }\n        });\n      }\n    }\n  });\n","import { PlateEditor } from '@udecode/plate-core';\nimport { moveListItems, MoveListItemsOptions } from './moveListItems';\n\nexport type UnindentListItemsOptions = Omit<MoveListItemsOptions, 'increase'>;\n\nexport const unindentListItems = (\n  editor: PlateEditor,\n  options: UnindentListItemsOptions = {}\n): void => moveListItems(editor, { ...options, increase: false });\n","import { getAbove } from '@udecode/plate-common';\nimport {\n  getPlatePluginTypes,\n  KeyboardHandler,\n  mapPlatePluginKeysToOptions,\n} from '@udecode/plate-core';\nimport isHotkey from 'is-hotkey';\nimport { castArray } from 'lodash';\nimport { ELEMENT_OL, ELEMENT_UL } from './defaults';\nimport { moveListItems, toggleList } from './transforms';\n\nexport const getListOnKeyDown = (\n  pluginKeys?: string | string[]\n): KeyboardHandler => (editor) => (e) => {\n  const listTypes = getPlatePluginTypes([ELEMENT_UL, ELEMENT_OL])(editor);\n\n  if (e.key === 'Tab' && editor.selection) {\n    const listSelected = getAbove(editor, {\n      at: editor.selection,\n      match: { type: listTypes },\n    });\n\n    if (listSelected) {\n      e.preventDefault();\n      moveListItems(editor, { increase: !e.shiftKey });\n      return;\n    }\n  }\n\n  const options = pluginKeys\n    ? mapPlatePluginKeysToOptions(editor, pluginKeys)\n    : [];\n\n  options.forEach(({ type, hotkey }) => {\n    if (!hotkey) return;\n\n    const hotkeys = castArray(hotkey);\n\n    for (const key of hotkeys) {\n      if (isHotkey(key)(e as any) && listTypes.includes(type)) {\n        toggleList(editor, { type });\n      }\n    }\n  });\n};\n","import {\n  deleteFragment,\n  ELEMENT_DEFAULT,\n  isFirstChild,\n  isSelectionAtBlockStart,\n} from '@udecode/plate-common';\nimport { getPlatePluginType, PlateEditor } from '@udecode/plate-core';\nimport {\n  getResetNodeOnKeyDown,\n  SIMULATE_BACKSPACE,\n} from '@udecode/plate-reset-node';\nimport { Editor } from 'slate';\nimport { getListItemEntry } from './queries/getListItemEntry';\nimport { isListNested } from './queries/isListNested';\nimport { removeFirstListItem } from './transforms/removeFirstListItem';\nimport { removeListItem } from './transforms/removeListItem';\nimport { unwrapList } from './transforms/unwrapList';\nimport { ELEMENT_LI } from './defaults';\n\nexport const getListDeleteBackward = (\n  editor: PlateEditor,\n  unit: 'character' | 'word' | 'line' | 'block'\n) => {\n  const res = getListItemEntry(editor, {});\n\n  let moved: boolean | undefined = false;\n\n  if (res) {\n    const { list, listItem } = res;\n\n    if (\n      isSelectionAtBlockStart(editor, {\n        match: (node) => node.type === ELEMENT_LI,\n      })\n    ) {\n      Editor.withoutNormalizing(editor, () => {\n        moved = removeFirstListItem(editor, { list, listItem });\n        if (moved) return true;\n\n        moved = removeListItem(editor, { list, listItem });\n        if (moved) return true;\n\n        if (isFirstChild(listItem[1]) && !isListNested(editor, list[1])) {\n          getResetNodeOnKeyDown({\n            rules: [\n              {\n                types: [getPlatePluginType(editor, ELEMENT_LI)],\n                defaultType: getPlatePluginType(editor, ELEMENT_DEFAULT),\n                hotkey: 'backspace',\n                predicate: () => isSelectionAtBlockStart(editor),\n                onReset: (_editor) => unwrapList(_editor as PlateEditor),\n              },\n            ],\n          })(editor)(SIMULATE_BACKSPACE);\n          moved = true;\n          return;\n        }\n\n        deleteFragment(editor, {\n          unit,\n          reverse: true,\n        });\n        moved = true;\n      });\n    }\n  }\n\n  return moved;\n};\n","import {\n  getBlockAbove,\n  getChildren,\n  getNode,\n  getText,\n  isSelectionAtBlockEnd,\n} from '@udecode/plate-common';\nimport {\n  getPlatePluginType,\n  PlateEditor,\n  TDescendant,\n  TElement,\n} from '@udecode/plate-core';\nimport { Editor, Node, NodeEntry, Path, Transforms } from 'slate';\nimport { ELEMENT_LI } from './defaults';\nimport { getListItemEntry, getListRoot, hasListChild } from './queries';\nimport {\n  moveListItemsToList,\n  moveListItemUp,\n  removeFirstListItem,\n  removeListItem,\n} from './transforms';\n\nconst pathToEntry = <T extends Node>(\n  editor: PlateEditor,\n  path: Path\n): NodeEntry<T> => Editor.node(editor, path) as NodeEntry<T>;\n\nconst selectionIsNotInAListHandler = (editor: PlateEditor): boolean => {\n  const pointAfterSelection = Editor.after(\n    editor,\n    editor.selection!.focus.path\n  );\n\n  if (pointAfterSelection) {\n    // there is a block after it\n    const nextSiblingListRes = getListItemEntry(editor, {\n      at: pointAfterSelection,\n    });\n\n    if (nextSiblingListRes) {\n      // the next block is a list\n      const { listItem } = nextSiblingListRes;\n      const parentBlockEntity = getBlockAbove(editor, {\n        at: editor.selection!.anchor,\n      });\n\n      if (!getText(editor, parentBlockEntity![1])) {\n        // the selected block is empty\n        Transforms.removeNodes(editor);\n\n        return true;\n      }\n\n      if (hasListChild(editor, listItem[0])) {\n        // the next block has children, so we have to move the first item up\n        const sublistRes = getListItemEntry(editor, {\n          at: [...listItem[1], 1, 0, 0],\n        });\n\n        moveListItemUp(editor, sublistRes!);\n      }\n    }\n  }\n\n  return false;\n};\n\nconst selectionIsInAListHandler = (\n  editor: PlateEditor,\n  res: { list: NodeEntry<TElement>; listItem: NodeEntry<TElement> }\n): boolean => {\n  const { listItem } = res;\n\n  // if it has no children\n  if (!hasListChild(editor, listItem[0])) {\n    const liType = getPlatePluginType(editor, ELEMENT_LI);\n    const liWithSiblings = Array.from(\n      Editor.nodes(editor, {\n        at: listItem[1],\n        mode: 'lowest',\n        match: (node: TDescendant, path) => {\n          if (path.length === 0) {\n            return false;\n          }\n\n          const isNodeLi = node.type === liType;\n          const isSiblingOfNodeLi =\n            (getNode(editor, Path.next(path)) as TDescendant)?.type === liType;\n\n          return isNodeLi && isSiblingOfNodeLi;\n        },\n      }),\n      (entry) => entry[1]\n    )[0];\n\n    if (!liWithSiblings) {\n      // there are no more list item in the list\n      const pointAfterListItem = Editor.after(editor, listItem[1]);\n\n      if (pointAfterListItem) {\n        // there is a block after it\n        const nextSiblingListRes = getListItemEntry(editor, {\n          at: pointAfterListItem,\n        });\n\n        if (nextSiblingListRes) {\n          // it is a list so we merge the lists\n          const listRoot = getListRoot(\n            editor,\n            listItem[1]\n          ) as NodeEntry<TElement>;\n\n          moveListItemsToList(editor, {\n            fromList: nextSiblingListRes.list,\n            toList: listRoot,\n            deleteFromList: true,\n          });\n\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    const siblingListItem: NodeEntry<TDescendant> = pathToEntry(\n      editor,\n      Path.next(liWithSiblings)\n    );\n\n    const siblingList: NodeEntry<TDescendant> = Editor.parent(\n      editor,\n      siblingListItem[1]\n    );\n\n    if (\n      removeListItem(editor, {\n        list: siblingList,\n        listItem: siblingListItem,\n        reverse: false,\n      })\n    ) {\n      return true;\n    }\n\n    // if (skipDefaultDelete) return skipDefaultDelete;\n\n    return false;\n  }\n\n  // if it has children\n  const nestedList = pathToEntry<TDescendant>(\n    editor,\n    Path.next([...listItem[1], 0])\n  );\n  const nestedListItem = getChildren<TDescendant>(nestedList)[0];\n\n  if (\n    removeFirstListItem(editor, {\n      list: nestedList,\n      listItem: nestedListItem,\n    })\n  ) {\n    return true;\n  }\n\n  if (\n    removeListItem(editor, {\n      list: nestedList,\n      listItem: nestedListItem,\n    })\n  ) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const getListDeleteForward = (editor: PlateEditor) => {\n  let skipDefaultDelete = false;\n\n  if (!editor?.selection) {\n    return skipDefaultDelete;\n  }\n\n  if (!isSelectionAtBlockEnd(editor)) {\n    return skipDefaultDelete;\n  }\n\n  Editor.withoutNormalizing(editor, () => {\n    const res = getListItemEntry(editor, {});\n\n    if (!res) {\n      skipDefaultDelete = selectionIsNotInAListHandler(editor);\n      return;\n    }\n\n    skipDefaultDelete = selectionIsInAListHandler(editor, res);\n  });\n\n  return skipDefaultDelete;\n};\n","import { deleteFragment, getAbove, getParent } from '@udecode/plate-common';\nimport { getPlatePluginType, PlateEditor } from '@udecode/plate-core';\nimport { Editor, Range, Transforms } from 'slate';\nimport { getHighestEmptyList } from './queries/getHighestEmptyList';\nimport { hasListChild } from './queries/hasListChild';\nimport { isAcrossListItems } from './queries/isAcrossListItems';\nimport { ELEMENT_LI } from './defaults';\n\nexport const getListDeleteFragment = (editor: PlateEditor) => {\n  let deleted = false;\n\n  Editor.withoutNormalizing(editor, () => {\n    // Selection should be across list items\n    if (!isAcrossListItems(editor)) return;\n\n    /**\n     * Check if the end li can be deleted (if it has no sublist).\n     * Store the path ref to delete it after deleteFragment.\n     */\n    const end = Editor.end(editor, editor.selection as Range);\n    const liEnd = getAbove(editor, {\n      at: end,\n      match: { type: getPlatePluginType(editor, ELEMENT_LI) },\n    });\n    const liEndCanBeDeleted = liEnd && !hasListChild(editor, liEnd[0]);\n    const liEndPathRef = liEndCanBeDeleted\n      ? Editor.pathRef(editor, liEnd![1])\n      : undefined;\n\n    /**\n     * Delete fragment and move end block children to start block\n     */\n    deleteFragment(editor);\n\n    const start = Editor.start(editor, editor.selection as Range);\n    const liStart = getAbove(editor, {\n      at: start,\n      match: { type: getPlatePluginType(editor, ELEMENT_LI) },\n    });\n\n    if (liEndPathRef) {\n      const liEndPath = liEndPathRef.unref()!;\n\n      const listStart = liStart && getParent(editor, liStart[1]);\n\n      const deletePath = getHighestEmptyList(editor, {\n        liPath: liEndPath,\n        diffListPath: listStart?.[1],\n      });\n\n      if (deletePath) {\n        Transforms.removeNodes(editor, { at: deletePath });\n      }\n\n      deleted = true;\n    }\n  });\n\n  return deleted;\n};\n","import { ELEMENT_DEFAULT, isBlockAboveEmpty } from '@udecode/plate-common';\nimport { getPlatePluginType, PlateEditor } from '@udecode/plate-core';\nimport {\n  getResetNodeOnKeyDown,\n  SIMULATE_BACKSPACE,\n} from '@udecode/plate-reset-node';\nimport { getListItemEntry } from './queries/getListItemEntry';\nimport { insertListItem } from './transforms/insertListItem';\nimport { moveListItemUp } from './transforms/moveListItemUp';\nimport { unwrapList } from './transforms/unwrapList';\nimport { ELEMENT_LI } from './defaults';\n\nexport const getListInsertBreak = (editor: PlateEditor) => {\n  if (!editor.selection) return;\n\n  const res = getListItemEntry(editor, {});\n  let moved: boolean | undefined;\n\n  // If selection is in a li\n  if (res) {\n    const { list, listItem } = res;\n\n    // If selected li is empty, move it up.\n    if (isBlockAboveEmpty(editor)) {\n      moved = moveListItemUp(editor, {\n        list,\n        listItem,\n      });\n\n      if (moved) return true;\n    }\n  }\n\n  const didReset = getResetNodeOnKeyDown({\n    rules: [\n      {\n        types: [getPlatePluginType(editor, ELEMENT_LI)],\n        defaultType: getPlatePluginType(editor, ELEMENT_DEFAULT),\n        predicate: () => !moved && isBlockAboveEmpty(editor),\n        onReset: (_editor) => unwrapList(_editor as PlateEditor),\n      },\n    ],\n  })(editor)(SIMULATE_BACKSPACE as any);\n  if (didReset) return true;\n\n  /**\n   * If selection is in li > p, insert li.\n   */\n  if (!moved) {\n    const inserted = insertListItem(editor);\n    if (inserted) return true;\n  }\n};\n","import { findNode } from '@udecode/plate-common';\nimport {\n  getPlatePluginOptions,\n  PlateEditor,\n  PlatePluginOptions,\n  TDescendant,\n} from '@udecode/plate-core';\nimport { Node, NodeEntry, Path, Transforms } from 'slate';\nimport { ELEMENT_LI, ELEMENT_OL, ELEMENT_UL } from './defaults';\n\nexport const getListInsertFragment = (editor: PlateEditor) => {\n  const { insertFragment } = editor;\n\n  const li = getPlatePluginOptions(editor, ELEMENT_LI);\n  const ul = getPlatePluginOptions(editor, ELEMENT_UL);\n  const ol = getPlatePluginOptions(editor, ELEMENT_OL);\n\n  const isListRoot = (node: TDescendant): boolean =>\n    [ul.type, ol.type].includes(node.type);\n\n  const getFirstAncestorOfType = (\n    root: TDescendant,\n    entry: NodeEntry,\n    { type }: PlatePluginOptions\n  ): NodeEntry<TDescendant> => {\n    let ancestor: Path = Path.parent(entry[1]);\n    while ((Node.get(root, ancestor) as TDescendant).type !== type) {\n      ancestor = Path.parent(ancestor);\n    }\n\n    return [Node.get(root, ancestor), ancestor];\n  };\n\n  /**\n   * Removes the \"empty\" leading lis. Empty in this context means lis only with other lis as children.\n   *\n   * @returns If argument is not a list root, returns it, otherwise returns ul[] or li[].\n   */\n  const trimList = <T extends TDescendant>(listRoot: T): T[] => {\n    if (!isListRoot(listRoot)) {\n      return [listRoot];\n    }\n\n    const textEntries = Array.from(Node.texts(listRoot));\n\n    const commonAncestorEntry = textEntries.reduce<NodeEntry<TDescendant>>(\n      (commonAncestor, textEntry) =>\n        Path.isAncestor(commonAncestor[1], textEntry[1])\n          ? commonAncestor\n          : Node.common(listRoot, textEntry[1], commonAncestor[1]),\n      // any list item would do, we grab the first one\n      getFirstAncestorOfType(listRoot, textEntries[0], li)\n    );\n\n    return isListRoot(commonAncestorEntry[0])\n      ? commonAncestorEntry[0].children\n      : [commonAncestorEntry[0]];\n  };\n\n  return (fragment: TDescendant[]) => {\n    const liEntry = findNode(editor, {\n      match: { type: li.type },\n      mode: 'lowest',\n    });\n\n    if (liEntry) {\n      const [, liPath] = liEntry;\n\n      // FIXME: fork insertFragment for edge cases\n      return Transforms.insertNodes(\n        editor,\n        fragment.flatMap((node) => trimList(node)),\n        { at: Path.next(liPath), select: true }\n      );\n    }\n\n    const filtered: TDescendant[] = isListRoot(fragment[0])\n      ? [{ text: '' }, ...fragment]\n      : fragment;\n\n    return insertFragment(filtered);\n  };\n};\n","import {\n  getChildren,\n  getParent,\n  insertEmptyElement,\n  match,\n  setNodes,\n} from '@udecode/plate-common';\nimport {\n  getPlatePluginType,\n  PlateEditor,\n  TDescendant,\n  TElement,\n} from '@udecode/plate-core';\nimport { Editor, NodeEntry, Path, PathRef, Transforms } from 'slate';\nimport { ELEMENT_LIC, ELEMENT_OL, ELEMENT_UL } from '../defaults';\nimport { getListTypes } from '../queries';\nimport { moveListItemUp } from '../transforms';\nimport { ListNormalizerOptions } from '../types';\n\n/**\n * Recursively get all the:\n * - block children\n * - inline children except those at excludeDepth\n */\nexport const getDeepInlineChildren = (\n  editor: PlateEditor,\n  {\n    children,\n  }: {\n    children: NodeEntry<TDescendant>[];\n  }\n) => {\n  const inlineChildren: NodeEntry<TDescendant>[] = [];\n\n  for (const child of children) {\n    if (Editor.isBlock(editor, child[0])) {\n      inlineChildren.push(\n        ...getDeepInlineChildren(editor, {\n          children: getChildren(child),\n        })\n      );\n    } else {\n      inlineChildren.push(child);\n    }\n  }\n\n  return inlineChildren;\n};\n\n/**\n * If the list item has no child: insert an empty list item container.\n * Else: move the children that are not valid to the list item container.\n */\nexport const normalizeListItem = (\n  editor: PlateEditor,\n  {\n    listItem,\n    validLiChildrenTypes = [],\n  }: { listItem: NodeEntry<TElement> } & ListNormalizerOptions\n) => {\n  let changed = false;\n\n  const allValidLiChildrenTypes = [\n    getPlatePluginType(editor, ELEMENT_UL),\n    getPlatePluginType(editor, ELEMENT_OL),\n    getPlatePluginType(editor, ELEMENT_LIC),\n    ...validLiChildrenTypes,\n  ];\n\n  const [, liPath] = listItem;\n  const liChildren = getChildren(listItem);\n\n  // Get invalid (type) li children path refs to be moved\n  const invalidLiChildrenPathRefs = liChildren\n    .filter(([child]) => !allValidLiChildrenTypes.includes(child.type))\n    .map(([, childPath]) => Editor.pathRef(editor, childPath));\n\n  const firstLiChild: NodeEntry<any> | undefined = liChildren[0];\n  const [firstLiChildNode, firstLiChildPath] =\n    (firstLiChild as NodeEntry<TElement>) ?? [];\n\n  // If li has no child or inline child, insert lic\n  if (!firstLiChild || !Editor.isBlock(editor, firstLiChildNode)) {\n    insertEmptyElement(editor, getPlatePluginType(editor, ELEMENT_LIC), {\n      at: liPath.concat([0]),\n    });\n    return true;\n  }\n\n  // If first li child is a block but not lic, set it to lic\n  if (\n    Editor.isBlock(editor, firstLiChildNode) &&\n    !match(firstLiChildNode as any, {\n      type: getPlatePluginType(editor, ELEMENT_LIC),\n    })\n  ) {\n    if (\n      match(firstLiChildNode as any, {\n        type: getListTypes(editor),\n      })\n    ) {\n      // the listItem has no lic so we move the children up a level\n      const parent = getParent(editor, listItem[1]);\n      const sublist = firstLiChild;\n      const children = getChildren(firstLiChild).reverse();\n      children.forEach((c) => {\n        moveListItemUp(editor, { list: sublist, listItem: c });\n      });\n\n      Transforms.removeNodes(editor, { at: [...parent![1], 0] });\n\n      return true;\n    }\n\n    // Allow block elements listed as valid li children types to be a first child instead of LIC\n    if (validLiChildrenTypes.includes(firstLiChildNode.type)) {\n      return true;\n    }\n\n    setNodes<TElement>(\n      editor,\n      {\n        type: getPlatePluginType(editor, ELEMENT_LIC),\n      },\n      {\n        at: firstLiChildPath,\n      }\n    );\n\n    changed = true;\n  }\n\n  const licChildren = getChildren(firstLiChild);\n\n  if (licChildren.length) {\n    const blockPathRefs: PathRef[] = [];\n    const inlineChildren: NodeEntry[] = [];\n\n    // Check that lic has no block children\n    for (const licChild of licChildren) {\n      if (!Editor.isBlock(editor, licChild[0])) {\n        break;\n      }\n\n      blockPathRefs.push(Editor.pathRef(editor, licChild[1]));\n\n      inlineChildren.push(\n        ...getDeepInlineChildren(editor, {\n          children: getChildren(licChild),\n        })\n      );\n    }\n\n    const to = Path.next(licChildren[licChildren.length - 1]?.[1]);\n\n    // Move lic nested inline children to its children\n    inlineChildren.reverse().forEach(([, path]) => {\n      Transforms.moveNodes(editor, {\n        at: path,\n        to,\n      });\n    });\n\n    // Remove lic block children\n    blockPathRefs.forEach((pathRef) => {\n      const path = pathRef.unref();\n\n      path &&\n        Transforms.removeNodes(editor, {\n          at: path,\n        });\n    });\n\n    if (blockPathRefs.length) {\n      changed = true;\n    }\n  }\n\n  if (changed) return true;\n\n  // Ensure that any text nodes under the list are inside the list item container\n  invalidLiChildrenPathRefs.reverse().forEach((ref) => {\n    const path = ref.unref();\n\n    path &&\n      Transforms.moveNodes(editor, {\n        at: path,\n        to: firstLiChildPath.concat([0]),\n      });\n  });\n\n  return !!invalidLiChildrenPathRefs.length;\n};\n","import { getParent, match } from '@udecode/plate-common';\nimport { PlateEditor, TElement } from '@udecode/plate-core';\nimport { Ancestor, Editor, NodeEntry, Path, Transforms } from 'slate';\nimport { getListTypes } from '../queries';\n\n// When pasting from e.g. Google Docs, the structure of nested lists like \"ul -> ul\"\n// should be normalized to \"ul -> li -> lic + ul\".\n// In other words, a nested list as a direct children of a list should be moved into a previous list item sibling\nexport const normalizeNestedList = (\n  editor: PlateEditor,\n  { nestedListItem }: { nestedListItem: NodeEntry<TElement> }\n) => {\n  const [, path] = nestedListItem;\n\n  const parentNode = getParent(editor, path);\n  const hasParentList =\n    parentNode && match(parentNode[0], { type: getListTypes(editor) });\n  if (!hasParentList) {\n    return false;\n  }\n\n  let previousListItemPath: Path;\n  try {\n    previousListItemPath = Path.previous(path);\n  } catch (e) {\n    return false;\n  }\n\n  // Previous sibling is the new parent\n  const previousSiblingItem = Editor.node(\n    editor,\n    previousListItemPath\n  ) as NodeEntry<Ancestor>;\n\n  if (previousSiblingItem) {\n    const [, previousPath] = previousSiblingItem;\n    const newPath = previousPath.concat([1]);\n\n    // Move the current item to the sublist\n    Transforms.moveNodes(editor, {\n      at: path,\n      to: newPath,\n    });\n\n    return true;\n  }\n};\n","import {\n  ELEMENT_DEFAULT,\n  getNode,\n  getParent,\n  getPreviousPath,\n  match,\n  setNodes,\n} from '@udecode/plate-common';\nimport {\n  getPlatePluginType,\n  isElement,\n  PlateEditor,\n  TDescendant,\n  TElement,\n} from '@udecode/plate-core';\nimport { Descendant, NodeEntry, Path, Transforms } from 'slate';\nimport { ELEMENT_LI, ELEMENT_LIC } from '../defaults';\nimport { getListTypes } from '../queries/getListTypes';\nimport { moveListItemsToList } from '../transforms';\nimport { ListNormalizerOptions } from '../types';\nimport { normalizeListItem } from './normalizeListItem';\nimport { normalizeNestedList } from './normalizeNestedList';\n\n/**\n * Normalize list node to force the ul>li>p+ul structure.\n */\nexport const getListNormalizer = (\n  editor: PlateEditor,\n  { validLiChildrenTypes }: ListNormalizerOptions\n) => {\n  const { normalizeNode } = editor;\n  const liType = getPlatePluginType(editor, ELEMENT_LI);\n  const licType = getPlatePluginType(editor, ELEMENT_LIC);\n  const defaultType = getPlatePluginType(editor, ELEMENT_DEFAULT);\n\n  return ([node, path]: NodeEntry) => {\n    if (!isElement(node)) return;\n\n    // remove empty list\n    if (match(node, { type: getListTypes(editor) })) {\n      if (\n        !node.children.length ||\n        !node.children.find(\n          (item: Descendant) => (item as TDescendant).type === liType\n        )\n      ) {\n        return Transforms.removeNodes(editor, { at: path });\n      }\n\n      const nextPath = Path.next(path);\n      const nextNode = getNode(editor, nextPath) as TElement | null;\n\n      // Has a list afterwards with the same type\n      if (nextNode?.type === node.type) {\n        moveListItemsToList(editor, {\n          fromList: [nextNode, nextPath],\n          toList: [node, path],\n          deleteFromList: true,\n        });\n      }\n\n      const prevPath = getPreviousPath(path) as Path;\n      const prevNode = getNode(editor, prevPath) as TElement | null;\n\n      // Has a list before with the same type\n      if (prevNode?.type === node.type) {\n        editor.normalizeNode([prevNode, prevPath]);\n\n        // early return since this node will no longer exists\n        return;\n      }\n\n      if (normalizeNestedList(editor, { nestedListItem: [node, path] })) {\n        return;\n      }\n    }\n\n    if (node.type === getPlatePluginType(editor, ELEMENT_LI)) {\n      if (\n        normalizeListItem(editor, {\n          listItem: [node, path],\n          validLiChildrenTypes,\n        })\n      ) {\n        return;\n      }\n    }\n\n    // LIC should have LI parent. If not, set LIC to DEFAULT type.\n    if (node.type === licType && licType !== defaultType) {\n      if (getParent(editor, path)?.[0].type !== liType) {\n        setNodes(editor, { type: defaultType }, { at: path });\n        return;\n      }\n    }\n\n    normalizeNode([node, path]);\n  };\n};\n","import { WithOverride } from '@udecode/plate-core';\nimport { getListDeleteBackward } from './getListDeleteBackward';\nimport { getListDeleteForward } from './getListDeleteForward';\nimport { getListDeleteFragment } from './getListDeleteFragment';\nimport { getListInsertBreak } from './getListInsertBreak';\nimport { getListInsertFragment } from './getListInsertFragment';\nimport { getListNormalizer } from './normalizers';\nimport { WithListOptions } from './types';\n\nexport const withList = ({\n  validLiChildrenTypes,\n}: WithListOptions = {}): WithOverride => (editor) => {\n  const { insertBreak, deleteBackward, deleteForward, deleteFragment } = editor;\n\n  editor.insertBreak = () => {\n    if (getListInsertBreak(editor)) return;\n\n    insertBreak();\n  };\n\n  editor.deleteBackward = (unit) => {\n    if (getListDeleteBackward(editor, unit)) return;\n\n    deleteBackward(unit);\n  };\n\n  editor.deleteForward = (unit) => {\n    if (getListDeleteForward(editor)) return;\n\n    deleteForward(unit);\n  };\n\n  editor.deleteFragment = () => {\n    if (getListDeleteFragment(editor)) return;\n\n    deleteFragment();\n  };\n\n  editor.insertFragment = getListInsertFragment(editor);\n\n  editor.normalizeNode = getListNormalizer(editor, { validLiChildrenTypes });\n\n  return editor;\n};\n","import { getRenderElement, PlatePlugin } from '@udecode/plate-core';\nimport { KEYS_LIST } from './defaults';\nimport { getListDeserialize } from './getListDeserialize';\nimport { getListOnKeyDown } from './getListOnKeyDown';\nimport { WithListOptions } from './types';\nimport { withList } from './withList';\n\n/**\n * Enables support for bulleted, numbered and to-do lists.\n */\nexport const createListPlugin = (options?: WithListOptions): PlatePlugin => ({\n  pluginKeys: KEYS_LIST,\n  renderElement: getRenderElement(KEYS_LIST),\n  deserialize: getListDeserialize(),\n  onKeyDown: getListOnKeyDown(KEYS_LIST),\n  withOverrides: withList(options),\n});\n","export const CLASS_TODO_LIST_CHECKED = 'slate-TodoListElement-rootChecked';\n","import { PlatePluginOptions } from '@udecode/plate-core';\n\nexport const ELEMENT_TODO_LI = 'action_item';\n\nexport const DEFAULTS_TODO_LIST: Partial<PlatePluginOptions> = {\n  hotkey: ['mod+opt+4', 'mod+shift+4'],\n};\n","import { getNodeDeserializer } from '@udecode/plate-common';\nimport {\n  Deserialize,\n  getPlatePluginOptions,\n  getSlateClass,\n} from '@udecode/plate-core';\nimport { CLASS_TODO_LIST_CHECKED } from './constants';\nimport { ELEMENT_TODO_LI } from './defaults';\n\nexport const getTodoListDeserialize = (): Deserialize => (editor) => {\n  const options = getPlatePluginOptions(editor, ELEMENT_TODO_LI);\n\n  return {\n    element: getNodeDeserializer({\n      type: options.type,\n      getNode: (el) => ({\n        type: options.type,\n        checked: el.classList.contains(CLASS_TODO_LIST_CHECKED),\n      }),\n      rules: [{ className: getSlateClass(options.type) }],\n    }),\n  };\n};\n","import { getToggleElementOnKeyDown } from '@udecode/plate-common';\nimport { getRenderElement, PlatePlugin } from '@udecode/plate-core';\nimport { ELEMENT_TODO_LI } from './defaults';\nimport { getTodoListDeserialize } from './getTodoListDeserialize';\n\nexport const createTodoListPlugin = (): PlatePlugin => ({\n  pluginKeys: ELEMENT_TODO_LI,\n  renderElement: getRenderElement(ELEMENT_TODO_LI),\n  deserialize: getTodoListDeserialize(),\n  onKeyDown: getToggleElementOnKeyDown(ELEMENT_TODO_LI),\n});\n"],"names":["ELEMENT_UL","ELEMENT_OL","ELEMENT_LI","ELEMENT_LIC","KEYS_LIST","getListDeserialize","editor","li","getPlatePluginOptions","lic","ul","ol","element","getElementDeserializer","type","rules","nodeNames","deserialize","preInsert","liEntry","findNode","match","isArray","isListNested","listPath","listParentNode","getParent","getPlatePluginType","getListTypes","getHighestEmptyList","diffListPath","liPath","list","getAbove","at","listNode","Path","equals","children","length","liParent","getListItemEntry","selection","liType","_at","Range","isRange","isCollapsed","focus","path","anchor","node","getNode","listItem","getListRoot","parentList","parentListPath","hasListChild","some","n","isAcrossListItems","isAcrossBlocks","isRangeAcrossBlocks","someNode","moveListItemDown","listItemPath","previousListItemPath","previous","e","previousSiblingItem","Editor","previousNode","previousPath","sublist","find","newPath","concat","withoutNormalizing","wrapNodes","Transforms","moveNodes","to","moveListItemsToList","fromList","fromListItem","fromStartIndex","_to","toList","toListIndex","deleteFromList","fromListPath","moved","fromListItemSublist","findDescendant","lastChildPath","getLastChildPath","next","moveChildren","delete","unwrapList","setNodes","ELEMENT_DEFAULT","unwrapNodes","split","moveListItemUp","move","liNode","toListPath","err","condA","condB","isLastChild","insertNodes","toListNode","liParentPath","movedUpLiPath","moveListItems","increase","undefined","lics","getNodes","highestLicPaths","highestLicPathRefs","forEach","licPath","parent","isAncestor","highestLiPath","push","pathRef","licPathRefsToMove","reverse","licPathRef","unref","listEntry","indentListItems","insertListItem","licType","licEntry","paragraphPath","listItemEntry","listItemNode","success","isStart","isEnd","isBlockTextEmptyAfterSelection","nextParagraphPath","nextListItemPath","text","splitNodes","select","collapse","edge","marks","moveListItemSublistItemsToListItemSublist","toListItem","start","fromListItemPath","toListItemPath","fromListItemSublistPath","toListItemSublist","fromListNode","fromListType","toListItemSublistPath","moveListSiblingsAfterCursor","offset","Node","get","isParent","removeFirstListItem","isFirstChild","removeListItem","isExpanded","previousLiPath","getPreviousPath","previousLi","tempLiPath","tempLi","tempLiPathRef","deleteFragment","removeNodes","toggleList","res","includes","mode","nodes","startPoint","endPoint","edges","commonEntry","common","startList","endList","end","rangeLength","Math","min","rootPathLength","Array","from","filter","unindentListItems","options","getListOnKeyDown","pluginKeys","listTypes","getPlatePluginTypes","key","listSelected","preventDefault","shiftKey","mapPlatePluginKeysToOptions","hotkey","hotkeys","_castArray","isHotkey","getListDeleteBackward","unit","isSelectionAtBlockStart","getResetNodeOnKeyDown","types","defaultType","predicate","onReset","_editor","SIMULATE_BACKSPACE","pathToEntry","selectionIsNotInAListHandler","pointAfterSelection","after","nextSiblingListRes","parentBlockEntity","getBlockAbove","getText","sublistRes","selectionIsInAListHandler","liWithSiblings","isNodeLi","isSiblingOfNodeLi","entry","pointAfterListItem","listRoot","siblingListItem","siblingList","nestedList","nestedListItem","getChildren","getListDeleteForward","skipDefaultDelete","isSelectionAtBlockEnd","getListDeleteFragment","deleted","liEnd","liEndCanBeDeleted","liEndPathRef","liStart","liEndPath","listStart","deletePath","getListInsertBreak","isBlockAboveEmpty","didReset","inserted","getListInsertFragment","insertFragment","isListRoot","getFirstAncestorOfType","root","ancestor","trimList","textEntries","texts","commonAncestorEntry","reduce","commonAncestor","textEntry","fragment","flatMap","filtered","getDeepInlineChildren","inlineChildren","child","isBlock","normalizeListItem","validLiChildrenTypes","changed","allValidLiChildrenTypes","liChildren","invalidLiChildrenPathRefs","map","childPath","firstLiChild","firstLiChildNode","firstLiChildPath","insertEmptyElement","c","licChildren","blockPathRefs","licChild","ref","normalizeNestedList","parentNode","hasParentList","getListNormalizer","normalizeNode","isElement","item","nextPath","nextNode","prevPath","prevNode","withList","insertBreak","deleteBackward","deleteForward","createListPlugin","renderElement","getRenderElement","onKeyDown","withOverrides","CLASS_TODO_LIST_CHECKED","ELEMENT_TODO_LI","DEFAULTS_TODO_LIST","getTodoListDeserialize","getNodeDeserializer","el","checked","classList","contains","className","getSlateClass","createTodoListPlugin","getToggleElementOnKeyDown"],"mappings":"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"}