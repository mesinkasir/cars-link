'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var plateStyledComponents = require('@udecode/plate-styled-components');
var _styled = require('styled-components');
var React = require('react');
var plateCombobox = require('@udecode/plate-combobox');
var plateCore = require('@udecode/plate-core');
var plateUiPopper = require('@udecode/plate-ui-popper');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _styled__default = /*#__PURE__*/_interopDefaultLegacy(_styled);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

const getComboboxStyles = props => {
  const item = [{
    "display": "flex",
    "alignItems": "center",
    "paddingLeft": "0.5rem",
    "paddingRight": "0.5rem",
    "cursor": "pointer"
  }, _styled.css(["font-size:14px;border-radius:0;min-height:36px;user-select:none;color:rgb(32,31,30);"])];
  return plateStyledComponents.createStyles({
    prefixClassNames: 'Combobox',
    ...props
  }, [{
    root: [{
      "--tw-bg-opacity": "1",
      "backgroundColor": "rgba(255, 255, 255, var(--tw-bg-opacity))",
      "margin": "0px",
      "padding": "0px",
      "overflow": "scroll"
    }, _styled.css(["width:300px;max-height:288px;border-radius:0 0 2px 2px;box-shadow:rgba(0,0,0,0.133) 0 3.2px 7.2px 0,rgba(0,0,0,0.11) 0 0.6px 1.8px 0;z-index:500;"])],
    item: [...item, _styled.css(["background:transparent;:hover{background:rgb(243,242,241);}"])],
    highlightedItem: [...item, _styled.css(["background:rgb(237,235,233);:hover{background:rgb(237,235,233);}"])]
  }]);
};

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

const ComboboxContent = props => {
  var _useComboboxSelectors, _useComboboxSelectors2, _activeComboboxStore$, _activeComboboxStore$2, _activeComboboxStore$3, _activeComboboxStore$4, _activeComboboxStore$5;

  const {
    component: Component,
    items,
    onRenderItem
  } = props;
  const targetRange = plateCombobox.useComboboxSelectors.targetRange();
  const filteredItems = plateCombobox.useComboboxSelectors.filteredItems();
  const highlightedIndex = plateCombobox.useComboboxSelectors.highlightedIndex();
  const popperContainer = (_useComboboxSelectors = plateCombobox.useComboboxSelectors.popperContainer) === null || _useComboboxSelectors === void 0 ? void 0 : _useComboboxSelectors.call(plateCombobox.useComboboxSelectors);
  const popperOptions = (_useComboboxSelectors2 = plateCombobox.useComboboxSelectors.popperOptions) === null || _useComboboxSelectors2 === void 0 ? void 0 : _useComboboxSelectors2.call(plateCombobox.useComboboxSelectors);
  const editor = plateCore.useEditorState();
  const combobox = plateCombobox.useComboboxControls();
  const activeComboboxStore = plateCombobox.useActiveComboboxStore();
  const text = plateCombobox.useComboboxSelectors.text();
  const storeItems = plateCombobox.useComboboxSelectors.items();
  const filter = (_activeComboboxStore$ = (_activeComboboxStore$2 = activeComboboxStore.use).filter) === null || _activeComboboxStore$ === void 0 ? void 0 : _activeComboboxStore$.call(_activeComboboxStore$2);
  const maxSuggestions = (_activeComboboxStore$3 = (_activeComboboxStore$4 = (_activeComboboxStore$5 = activeComboboxStore.use).maxSuggestions) === null || _activeComboboxStore$4 === void 0 ? void 0 : _activeComboboxStore$4.call(_activeComboboxStore$5)) !== null && _activeComboboxStore$3 !== void 0 ? _activeComboboxStore$3 : storeItems.length;
  const popperRef = React__default['default'].useRef(null); // Update items

  React.useEffect(() => {
    items && plateCombobox.comboboxActions.items(items);
  }, [items]); // Filter items

  React.useEffect(() => {
    if (!plateCore.isDefined(text)) return;

    if (text.length === 0) {
      return plateCombobox.comboboxActions.filteredItems(storeItems.slice(0, maxSuggestions));
    }

    const _filteredItems = storeItems.filter(filter ? filter(text) : value => value.text.toLowerCase().startsWith(text.toLowerCase())).slice(0, maxSuggestions);

    plateCombobox.comboboxActions.filteredItems(_filteredItems);
  }, [filter, storeItems, maxSuggestions, text]); // Get target range rect

  const getBoundingClientRect = React.useCallback(() => {
    var _getRangeBoundingClie;

    return (_getRangeBoundingClie = plateUiPopper.getRangeBoundingClientRect(editor, targetRange)) !== null && _getRangeBoundingClie !== void 0 ? _getRangeBoundingClie : plateUiPopper.virtualReference;
  }, [editor, targetRange]); // Update popper position

  const {
    styles: popperStyles,
    attributes
  } = plateUiPopper.usePopperPosition({
    popperElement: popperRef.current,
    popperContainer,
    popperOptions,
    placement: 'bottom-start',
    getBoundingClientRect,
    offset: [0, 4]
  });
  const menuProps = combobox ? combobox.getMenuProps({}, {
    suppressRefError: true
  }) : {
    ref: null
  };
  const {
    root,
    item: styleItem,
    highlightedItem
  } = getComboboxStyles(props);
  return /*#__PURE__*/React__default['default'].createElement(plateStyledComponents.PortalBody, null, /*#__PURE__*/React__default['default'].createElement(_StyledUl, _extends({}, menuProps, {
    ref: popperRef,
    style: popperStyles.popper,
    className: root.className
  }, attributes.popper, {
    $_css: root.css
  }), Component ? Component({
    store: activeComboboxStore
  }) : null, filteredItems.map((item, index) => {
    const Item = onRenderItem ? onRenderItem({
      item: item
    }) : item.text;
    const highlighted = index === highlightedIndex;
    return /*#__PURE__*/React__default['default'].createElement(_StyledDiv, _extends({
      key: item.key,
      className: !highlighted ? styleItem === null || styleItem === void 0 ? void 0 : styleItem.className : highlightedItem === null || highlightedItem === void 0 ? void 0 : highlightedItem.css
    }, combobox.getItemProps({
      item,
      index
    }), {
      onMouseDown: e => {
        var _getComboboxStoreById;

        e.preventDefault();
        const onSelectItem = (_getComboboxStoreById = plateCombobox.getComboboxStoreById(plateCombobox.comboboxSelectors.activeId())) === null || _getComboboxStoreById === void 0 ? void 0 : _getComboboxStoreById.get.onSelectItem();
        onSelectItem === null || onSelectItem === void 0 ? void 0 : onSelectItem(editor, item);
      },
      $_css2: !highlighted ? styleItem === null || styleItem === void 0 ? void 0 : styleItem.css : highlightedItem === null || highlightedItem === void 0 ? void 0 : highlightedItem.css
    }), Item);
  })));
};
/**
 * Register the combobox id, trigger, onSelectItem
 * Renders the combobox if active.
 */


const Combobox = ({
  id,
  trigger,
  searchPattern,
  onSelectItem,
  controlled,
  ...props
}) => {
  var _useEventEditorSelect;

  const editor = plateCore.useEditorState();
  const focusedEditorId = (_useEventEditorSelect = plateCore.useEventEditorSelectors.focus) === null || _useEventEditorSelect === void 0 ? void 0 : _useEventEditorSelect.call(plateCore.useEventEditorSelectors);
  const combobox = plateCombobox.useComboboxControls();
  const activeId = plateCombobox.useComboboxSelectors.activeId();
  React.useEffect(() => {
    plateCombobox.comboboxActions.setComboboxById({
      id,
      trigger,
      searchPattern,
      controlled,
      onSelectItem
    });
  }, [id, trigger, searchPattern, controlled, onSelectItem]);

  if (!combobox || !editor.selection || focusedEditorId !== editor.id || activeId !== id) {
    return null;
  }

  return /*#__PURE__*/React__default['default'].createElement(ComboboxContent, props);
};

var _StyledUl = _styled__default['default']("ul").withConfig({
  displayName: "Combobox___StyledUl",
  componentId: "sc-1chhjwl-0"
})(["", ""], p => p.$_css);

var _StyledDiv = _styled__default['default']("div").withConfig({
  displayName: "Combobox___StyledDiv",
  componentId: "sc-1chhjwl-1"
})(["", ""], p => p.$_css2);

exports.Combobox = Combobox;
exports.getComboboxStyles = getComboboxStyles;
//# sourceMappingURL=index.js.map
