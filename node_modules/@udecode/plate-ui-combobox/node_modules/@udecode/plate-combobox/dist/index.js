'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var zustood = require('@udecode/zustood');
var plateCore = require('@udecode/plate-core');
var slate = require('slate');
var react = require('react');
var downshift = require('downshift');

const createComboboxStore = state => zustood.createStore(`combobox-${state.id}`)(state);

const comboboxStore = zustood.createStore('combobox')({
  activeId: null,
  byId: {},
  highlightedIndex: 0,
  items: [],
  filteredItems: [],
  targetRange: null,
  text: null
}).extendActions((set, get) => ({
  setComboboxById: state => {
    if (get.byId()[state.id]) return;
    set.state(draft => {
      draft.byId[state.id] = createComboboxStore(state);
    });
  },
  open: state => {
    set.mergeState(state);
  },
  reset: () => {
    set.state(draft => {
      draft.activeId = null;
      draft.highlightedIndex = 0;
      draft.items = [];
      draft.text = null;
      draft.targetRange = null;
    });
  }
})).extendSelectors(state => ({
  isOpen: () => !!state.activeId
}));
const useComboboxSelectors = comboboxStore.use;
const comboboxSelectors = comboboxStore.get;
const comboboxActions = comboboxStore.set;
const getComboboxStoreById = id => id ? comboboxSelectors.byId()[id] : null;
const useActiveComboboxStore = () => {
  const activeId = useComboboxSelectors.activeId();
  const comboboxes = useComboboxSelectors.byId();
  return activeId ? comboboxes[activeId] : null;
};

/**
 * Get text and range from trigger to cursor.
 * Starts with trigger and ends with non-whitespace character.
 */

const getTextFromTrigger = (editor, {
  at,
  trigger,
  searchPattern = `\\S+`
}) => {
  const escapedTrigger = plateCore.escapeRegExp(trigger);
  const triggerRegex = new RegExp(`(?:^|\\s)${escapedTrigger}`);
  let start = at;
  let end;

  while (true) {
    end = start;
    if (!start) break;
    start = slate.Editor.before(editor, start);
    const charRange = start && slate.Editor.range(editor, start, end);
    const charText = plateCore.getText(editor, charRange);

    if (!charText.match(searchPattern)) {
      start = end;
      break;
    }
  } // Range from start to cursor


  const range = start && slate.Editor.range(editor, start, at);
  const text = plateCore.getText(editor, range);
  if (!range || !text.match(triggerRegex)) return;
  return {
    range,
    textAfterTrigger: text.substring(trigger.length)
  };
}; // export const matchesTriggerAndPattern = (
//   editor: TEditor,
//   { at, trigger, pattern }: { at: Point; trigger: string; pattern: string }
// ) => {
//   // Point at the start of line
//   const lineStart = Editor.before(editor, at, { unit: 'line' });
//
//   // Range from before to start
//   const beforeRange = lineStart && Editor.range(editor, lineStart, at);
//
//   // Before text
//   const beforeText = getText(editor, beforeRange);
//
//   // Starts with char and ends with word characters
//   const escapedTrigger = escapeRegExp(trigger);
//
//   const beforeRegex = new RegExp(`(?:^|\\s)${escapedTrigger}(${pattern})$`);
//
//   // Match regex on before text
//   const match = !!beforeText && beforeText.match(beforeRegex);
//
//   // Point at the start of mention
//   const mentionStart = match
//     ? Editor.before(editor, at, {
//         unit: 'character',
//         distance: match[1].length + trigger.length,
//       })
//     : null;
//
//   // Range from mention to start
//   const mentionRange = mentionStart && Editor.range(editor, mentionStart, at);
//
//   return {
//     range: mentionRange,
//     match,
//   };
// };

/**
 * For each combobox state (byId):
 * - if the selection is collapsed
 * - if the cursor follows the trigger
 * - if there is text without whitespaces after the trigger
 * - open the combobox: set id, search, targetRange in the store
 * Close the combobox if needed
 */

const onChangeCombobox = editor => () => {
  const byId = comboboxSelectors.byId();
  const activeId = comboboxSelectors.activeId();
  let shouldClose = true;

  for (const store of Object.values(byId)) {
    var _store$get$controlled, _store$get, _store$get$searchPatt, _store$get2;

    const id = store.get.id();
    const controlled = (_store$get$controlled = (_store$get = store.get).controlled) === null || _store$get$controlled === void 0 ? void 0 : _store$get$controlled.call(_store$get);

    if (controlled) {
      // do not close controlled comboboxes
      if (activeId === id) {
        shouldClose = false;
        break;
      } else {
        // do not open controlled comboboxes
        continue;
      }
    }

    const {
      selection
    } = editor;

    if (!selection || !plateCore.isCollapsed(selection)) {
      continue;
    }

    const trigger = store.get.trigger();
    const searchPattern = (_store$get$searchPatt = (_store$get2 = store.get).searchPattern) === null || _store$get$searchPatt === void 0 ? void 0 : _store$get$searchPatt.call(_store$get2);
    const isCursorAfterTrigger = getTextFromTrigger(editor, {
      at: slate.Range.start(selection),
      trigger,
      searchPattern
    });

    if (!isCursorAfterTrigger) {
      continue;
    }

    const {
      range,
      textAfterTrigger
    } = isCursorAfterTrigger;
    comboboxActions.open({
      activeId: id,
      text: textAfterTrigger,
      targetRange: range
    });
    shouldClose = false;
    break;
  }

  if (shouldClose && comboboxSelectors.isOpen()) {
    comboboxActions.reset();
  }
};

/**
 * Returns the next index in the list of an item that is not disabled.
 *
 * @param {number} moveAmount Number of positions to move. Negative to move backwards, positive forwards.
 * @param {number} baseIndex The initial position to move from.
 * @param {number} itemCount The total number of items.
 * @param {Function} getItemNodeFromIndex Used to check if item is disabled.
 * @param {boolean} circular Specify if navigation is circular. Default is true.
 * @returns {number} The new index. Returns baseIndex if item is not disabled. Returns next non-disabled item otherwise. If no non-disabled found it will return -1.
 */
const getNextNonDisabledIndex = (moveAmount, baseIndex, itemCount, getItemNodeFromIndex, circular) => {
  const currentElementNode = getItemNodeFromIndex(baseIndex);

  if (!currentElementNode || !currentElementNode.hasAttribute('disabled')) {
    return baseIndex;
  }

  if (moveAmount > 0) {
    for (let index = baseIndex + 1; index < itemCount; index++) {
      if (!getItemNodeFromIndex(index).hasAttribute('disabled')) {
        return index;
      }
    }
  } else {
    for (let index = baseIndex - 1; index >= 0; index--) {
      if (!getItemNodeFromIndex(index).hasAttribute('disabled')) {
        return index;
      }
    }
  }

  if (circular) {
    return moveAmount > 0 ? getNextNonDisabledIndex(1, 0, itemCount, getItemNodeFromIndex, false) : getNextNonDisabledIndex(-1, itemCount - 1, itemCount, getItemNodeFromIndex, false);
  }

  return -1;
};

/**
 * Returns the new index in the list, in a circular way. If next value is out of bonds from the total,
 * it will wrap to either 0 or itemCount - 1.
 *
 * @param {number} moveAmount Number of positions to move. Negative to move backwards, positive forwards.
 * @param {number} baseIndex The initial position to move from.
 * @param {number} itemCount The total number of items.
 * @param {Function} getItemNodeFromIndex Used to check if item is disabled.
 * @param {boolean} circular Specify if navigation is circular. Default is true.
 * @returns {number} The new index after the move.
 */

const getNextWrappingIndex = (moveAmount, baseIndex, itemCount, getItemNodeFromIndex, circular = true) => {
  if (itemCount === 0) {
    return -1;
  }

  const itemsLastIndex = itemCount - 1; // noinspection SuspiciousTypeOfGuard

  if (typeof baseIndex !== 'number' || baseIndex < 0 || baseIndex >= itemCount) {
    baseIndex = moveAmount > 0 ? -1 : itemsLastIndex + 1;
  }

  let newIndex = baseIndex + moveAmount;

  if (newIndex < 0) {
    newIndex = circular ? itemsLastIndex : 0;
  } else if (newIndex > itemsLastIndex) {
    newIndex = circular ? 0 : itemsLastIndex;
  }

  const nonDisabledNewIndex = getNextNonDisabledIndex(moveAmount, newIndex, itemCount, getItemNodeFromIndex, circular);

  if (nonDisabledNewIndex === -1) {
    return baseIndex >= itemCount ? -1 : baseIndex;
  }

  return nonDisabledNewIndex;
};

/**
 * If the combobox is open, handle:
 * - down (next item)
 * - up (previous item)
 * - escape (reset combobox)
 * - tab, enter (select item)
 */

const onKeyDownCombobox = editor => event => {
  const {
    highlightedIndex,
    filteredItems,
    activeId
  } = comboboxSelectors.state();
  const isOpen = comboboxSelectors.isOpen();
  if (!isOpen) return;
  const store = getComboboxStoreById(activeId);
  if (!store) return;
  const onSelectItem = store.get.onSelectItem();

  if (event.key === 'ArrowDown') {
    event.preventDefault();
    const newIndex = getNextWrappingIndex(1, highlightedIndex, filteredItems.length, () => {}, true);
    comboboxActions.highlightedIndex(newIndex);
    return;
  }

  if (event.key === 'ArrowUp') {
    event.preventDefault();
    const newIndex = getNextWrappingIndex(-1, highlightedIndex, filteredItems.length, () => {}, true);
    comboboxActions.highlightedIndex(newIndex);
    return;
  }

  if (event.key === 'Escape') {
    event.preventDefault();
    comboboxActions.reset();
    return;
  }

  if (['Tab', 'Enter'].includes(event.key)) {
    event.preventDefault();

    if (filteredItems[highlightedIndex]) {
      onSelectItem === null || onSelectItem === void 0 ? void 0 : onSelectItem(editor, filteredItems[highlightedIndex]);
    }
  }
};

const KEY_COMBOBOX = 'combobox';
const createComboboxPlugin = plateCore.createPluginFactory({
  key: KEY_COMBOBOX,
  handlers: {
    onChange: onChangeCombobox,
    onKeyDown: onKeyDownCombobox
  }
});

const useComboboxControls = () => {
  const isOpen = useComboboxSelectors.isOpen();
  const highlightedIndex = useComboboxSelectors.highlightedIndex();
  const filteredItems = useComboboxSelectors.filteredItems();
  const {
    closeMenu,
    getMenuProps,
    getComboboxProps,
    getInputProps,
    getItemProps
  } = downshift.useCombobox({
    isOpen,
    highlightedIndex,
    items: filteredItems,
    circularNavigation: true
  });
  getMenuProps({}, {
    suppressRefError: true
  });
  getComboboxProps({}, {
    suppressRefError: true
  });
  getInputProps({}, {
    suppressRefError: true
  });
  return react.useMemo(() => ({
    closeMenu,
    getMenuProps,
    getItemProps
  }), [closeMenu, getItemProps, getMenuProps]);
};

exports.KEY_COMBOBOX = KEY_COMBOBOX;
exports.comboboxActions = comboboxActions;
exports.comboboxSelectors = comboboxSelectors;
exports.comboboxStore = comboboxStore;
exports.createComboboxPlugin = createComboboxPlugin;
exports.getComboboxStoreById = getComboboxStoreById;
exports.getNextNonDisabledIndex = getNextNonDisabledIndex;
exports.getNextWrappingIndex = getNextWrappingIndex;
exports.getTextFromTrigger = getTextFromTrigger;
exports.onChangeCombobox = onChangeCombobox;
exports.onKeyDownCombobox = onKeyDownCombobox;
exports.useActiveComboboxStore = useActiveComboboxStore;
exports.useComboboxControls = useComboboxControls;
exports.useComboboxSelectors = useComboboxSelectors;
//# sourceMappingURL=index.js.map
