{"version":3,"file":"index.es.js","sources":["../src/deserializer/utils/deserializeCSV.ts","../src/deserializer/createDeserializeCSVPlugin.ts"],"sourcesContent":["import { ELEMENT_DEFAULT } from '@udecode/plate-common';\nimport {\n  getPlatePluginType,\n  PlateEditor,\n  TDescendant,\n  TElement,\n  TNode,\n} from '@udecode/plate-core';\nimport {\n  ELEMENT_TABLE,\n  ELEMENT_TD,\n  ELEMENT_TH,\n  ELEMENT_TR,\n} from '@udecode/plate-table';\nimport { parse } from 'papaparse';\n\nconst isValidCsv = (\n  data: Record<string, string>[][],\n  errors: Record<string, string>[][],\n  errorTolerance: number\n) => {\n  if (errorTolerance < 0) errorTolerance = 0;\n  return !(\n    !data ||\n    data.length < 2 ||\n    data[0].length < 2 ||\n    data[1].length < 2 ||\n    (errors.length && errors.length > errorTolerance * data.length)\n  );\n};\n\nexport const deserializeCSV = <T = {}>(\n  editor: PlateEditor<T>,\n  content: string,\n  header = false,\n  errorTolerance: number\n): TDescendant[] | undefined => {\n  // Verify it's a csv string\n  const testCsv = parse(content, { preview: 2 });\n\n  if (testCsv.errors.length === 0) {\n    const csv = parse(content, { header });\n\n    if (\n      !isValidCsv(\n        csv.data as Record<string, string>[][],\n        (csv.errors as unknown) as Record<string, string>[][],\n        errorTolerance\n      )\n    )\n      return;\n\n    const paragraph = getPlatePluginType(editor, ELEMENT_DEFAULT);\n    const table = getPlatePluginType(editor, ELEMENT_TABLE);\n    const th = getPlatePluginType(editor, ELEMENT_TH);\n    const tr = getPlatePluginType(editor, ELEMENT_TR);\n    const td = getPlatePluginType(editor, ELEMENT_TD);\n\n    const ast: TNode = {\n      type: table,\n      children: [],\n    };\n\n    if (csv.meta.fields) {\n      // csv file has headers, data structure is an array of objects keyed on the heading title\n      ast.children.push({\n        type: tr,\n        children: csv.meta.fields.map((field: string) => ({\n          type: th,\n          children: [{ type: paragraph, children: [{ text: field }] }],\n        })),\n      });\n      for (const row of csv.data as Record<string, string>[]) {\n        ast.children.push({\n          type: tr,\n          children: csv.meta.fields.map((field: string) => ({\n            type: td,\n            children: [\n              { type: paragraph, children: [{ text: row[field] || '' }] },\n            ],\n          })),\n        });\n      }\n    } else {\n      // csv is an array of arrays\n      for (const row of csv.data as [string[]]) {\n        ast.children.push({\n          type: tr,\n          children: [],\n        });\n        for (const cell of row) {\n          (ast.children[ast.children.length - 1] as TElement).children.push({\n            type: td,\n            children: [{ type: paragraph, children: [{ text: cell }] }],\n          });\n        }\n      }\n    }\n    return [\n      {\n        type: paragraph,\n        children: [{ text: '' }],\n      },\n      ast,\n      {\n        type: paragraph,\n        children: [{ text: '' }],\n      },\n    ];\n  }\n};\n","import {\n  getPlatePluginWithOverrides,\n  PlatePlugin,\n  WithOverride,\n} from '@udecode/plate-core';\nimport {\n  insertDeserializedFragment,\n  isDeserializerEnabled,\n} from '@udecode/plate-serializer';\nimport { deserializeCSV } from './utils';\n\nexport interface WithDeserializeCSVOptions {\n  plugins?: PlatePlugin[];\n  // Percentage in decimal form, from 0 to a very large number, 0 for no errors allowed,\n  // Default is 0.25\n  // Percentage based on number of errors compared to number of rows\n  errorTolerance?: number;\n}\n\nexport const csvDeserializerId = 'CSV Deserializer';\n\n/**\n * Enables support for deserializing content\n * from CSV format to Slate format.\n */\nexport const withDeserializeCSV = ({\n  plugins = [],\n  errorTolerance = 0.25,\n}: WithDeserializeCSVOptions = {}): WithOverride => (editor) => {\n  const { insertData } = editor;\n\n  editor.insertData = (data) => {\n    const content = data.getData('text/plain');\n\n    const isEnabled = isDeserializerEnabled(editor, plugins, csvDeserializerId);\n\n    if (content && isEnabled) {\n      const fragment = deserializeCSV(editor, content, true, errorTolerance);\n\n      if (fragment?.length) {\n        return insertDeserializedFragment(editor, { fragment, plugins });\n      }\n    }\n\n    insertData(data);\n  };\n\n  return editor;\n};\n\n/**\n * @see {@link withDeserializeCSV}\n */\nexport const createDeserializeCSVPlugin = getPlatePluginWithOverrides(\n  withDeserializeCSV\n);\n"],"names":["isValidCsv","data","errors","errorTolerance","length","deserializeCSV","editor","content","header","testCsv","parse","preview","csv","paragraph","getPlatePluginType","ELEMENT_DEFAULT","table","ELEMENT_TABLE","th","ELEMENT_TH","tr","ELEMENT_TR","td","ELEMENT_TD","ast","type","children","meta","fields","push","map","field","text","row","cell","csvDeserializerId","withDeserializeCSV","plugins","insertData","getData","isEnabled","isDeserializerEnabled","fragment","insertDeserializedFragment","createDeserializeCSVPlugin","getPlatePluginWithOverrides"],"mappings":"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"}