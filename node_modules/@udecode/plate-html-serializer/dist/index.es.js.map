{"version":3,"file":"index.es.js","sources":["../src/serializer/utils/htmlStringToDOMNode.ts","../src/deserializer/utils/deserializeHTMLToBreak.ts","../src/deserializer/utils/deserializeHTMLToElement.ts","../src/deserializer/utils/deserializeHTMLToFragment.ts","../src/deserializer/utils/deserializeHTMLToMarks.ts","../src/deserializer/utils/deserializeHTMLToText.ts","../src/deserializer/utils/deserializeHTMLNode.ts","../src/deserializer/utils/deserializeHTMLElement.ts","../src/deserializer/utils/deserializeHTMLToDocumentFragment.ts","../src/deserializer/createDeserializeHTMLPlugin.ts","../../../../node_modules/lodash/isArray.js","../../../../node_modules/lodash/castArray.js","../src/serializer/serializeHTMLFromNodes.ts"],"sourcesContent":["/**\n * Convert HTML string into HTML element.\n */\nexport const htmlStringToDOMNode = (\n  rawHtml: string,\n  stripWhitespace = true\n) => {\n  const node = document.createElement('body');\n  node.innerHTML = rawHtml;\n\n  if (stripWhitespace) {\n    node.innerHTML = node.innerHTML.replace(/(\\r\\n|\\n|\\r|\\t)/gm, '');\n  }\n\n  return node;\n};\n","/**\n * Deserialize HTML to break line.\n */\nexport const deserializeHTMLToBreak = (node: HTMLElement | ChildNode) => {\n  if (node.nodeName === 'BR') {\n    return '\\n';\n  }\n};\n","import {\n  PlateEditor,\n  PlatePlugin,\n  TDescendant,\n  TElement,\n} from '@udecode/plate-core';\nimport { jsx } from 'slate-hyperscript';\nimport { DeserializeHTMLChildren } from '../types';\n\njsx;\n\n/**\n * Deserialize HTML to Element.\n */\nexport const deserializeHTMLToElement = <T = {}>(\n  editor: PlateEditor<T>,\n  {\n    plugins,\n    element,\n    children,\n  }: {\n    plugins: PlatePlugin<T>[];\n    element: HTMLElement;\n    children: DeserializeHTMLChildren[];\n  }\n): TElement | undefined => {\n  let slateElement: any;\n  let withoutChildren: boolean | undefined;\n\n  plugins.some(({ deserialize: pluginDeserializers }) => {\n    const elementDeserializers = pluginDeserializers?.(editor).element;\n    if (!elementDeserializers) return;\n\n    return elementDeserializers.some((deserializer) => {\n      const deserialized = deserializer.deserialize(element);\n      if (!deserialized) return;\n\n      slateElement = deserialized;\n      withoutChildren = deserializer.withoutChildren;\n      return true;\n    });\n  });\n\n  if (slateElement) {\n    let descendants = children as TDescendant[];\n    if (!descendants.length || withoutChildren) {\n      descendants = [{ text: '' }];\n    }\n\n    return jsx('element', slateElement, descendants) as TElement;\n  }\n};\n","import { TDescendant } from '@udecode/plate-core';\nimport { jsx } from 'slate-hyperscript';\nimport { DeserializeHTMLChildren } from '../types';\n\njsx;\n\n/**\n * Deserialize HTML body element to Fragment.\n */\nexport const deserializeHTMLToFragment = ({\n  element,\n  children,\n}: {\n  element: HTMLElement;\n  children: DeserializeHTMLChildren[];\n}): TDescendant[] | undefined => {\n  if (element.nodeName === 'BODY') {\n    return jsx('fragment', {}, children);\n  }\n};\n","import { mergeDeepToNodes } from '@udecode/plate-common';\nimport {\n  isElement,\n  PlateEditor,\n  PlatePlugin,\n  TDescendant,\n} from '@udecode/plate-core';\nimport { Text } from 'slate';\nimport { jsx } from 'slate-hyperscript';\nimport { DeserializeHTMLChildren } from '../types';\n\njsx;\n\nexport interface DeserializeMarksProps<T = {}> {\n  plugins: PlatePlugin<T>[];\n  element: HTMLElement;\n  children: DeserializeHTMLChildren[];\n}\n\n/**\n * Deserialize HTML to TDescendant[] with marks on Text.\n * Build the leaf from the leaf deserializers of each plugin.\n */\nexport const deserializeHTMLToMarks = <T = {}>(\n  editor: PlateEditor<T>,\n  { plugins, element, children }: DeserializeMarksProps<T>\n) => {\n  let leaf = {};\n\n  plugins.forEach(({ deserialize: pluginDeserializers }) => {\n    const leafDeserializers = pluginDeserializers?.(editor).leaf;\n    if (!leafDeserializers) return;\n\n    leafDeserializers.forEach((deserializer) => {\n      const leafPart = deserializer.deserialize(element);\n\n      if (!leafPart) return;\n\n      leaf = { ...leaf, ...leafPart };\n    });\n  });\n\n  return children.reduce((arr: TDescendant[], child) => {\n    if (!child) return arr;\n\n    if (isElement(child)) {\n      if (Object.keys(leaf).length) {\n        mergeDeepToNodes({\n          node: child,\n          source: leaf,\n          query: {\n            filter: ([n]) => Text.isText(n),\n          },\n        });\n      }\n      arr.push(child);\n    } else {\n      arr.push(jsx('text', leaf, child));\n    }\n\n    return arr;\n  }, []);\n};\n","/**\n * Deserialize HTML text node to text.\n */\nexport const deserializeHTMLToText = (node: HTMLElement | ChildNode) => {\n  if (node.nodeType === Node.TEXT_NODE) {\n    return node.nodeValue === '\\n' ? null : node.textContent;\n  }\n};\n","import { PlateEditor, PlatePlugin } from '@udecode/plate-core';\nimport { DeserializeHTMLChildren, DeserializeHTMLReturn } from '../types';\nimport { deserializeHTMLToBreak } from './deserializeHTMLToBreak';\nimport { deserializeHTMLToElement } from './deserializeHTMLToElement';\nimport { deserializeHTMLToFragment } from './deserializeHTMLToFragment';\nimport { deserializeHTMLToMarks } from './deserializeHTMLToMarks';\nimport { deserializeHTMLToText } from './deserializeHTMLToText';\n\n/**\n * Deserialize HTML element or child node.\n */\nexport const deserializeHTMLNode = <T = {}>(\n  editor: PlateEditor<T>,\n  plugins: PlatePlugin<T>[]\n) => (node: HTMLElement | ChildNode): DeserializeHTMLReturn => {\n  // text node\n  const textNode = deserializeHTMLToText(node);\n  if (textNode) return textNode;\n\n  // if not an element node\n  if (node.nodeType !== Node.ELEMENT_NODE) return null;\n\n  const htmlElement = node as HTMLElement;\n\n  // break line\n  const breakLine = deserializeHTMLToBreak(node);\n  if (breakLine) return breakLine;\n\n  const { nodeName } = node;\n  let parent = node;\n\n  // blockquote\n  if (nodeName === 'PRE' && node.childNodes[0]?.nodeName === 'CODE') {\n    [parent] = node.childNodes;\n  }\n\n  const children: DeserializeHTMLChildren[] = Array.from(parent.childNodes)\n    .map(deserializeHTMLNode(editor, plugins))\n    .flat();\n\n  // body\n  const fragment = deserializeHTMLToFragment({\n    element: htmlElement,\n    children,\n  });\n  if (fragment) return fragment;\n\n  // element\n  const element = deserializeHTMLToElement(editor, {\n    plugins,\n    element: htmlElement,\n    children,\n  });\n  if (element) return element;\n\n  // mark\n  return deserializeHTMLToMarks(editor, {\n    plugins,\n    element: htmlElement,\n    children,\n  });\n};\n","import { PlateEditor, PlatePlugin } from '@udecode/plate-core';\nimport { DeserializeHTMLReturn } from '../types';\nimport { deserializeHTMLNode } from './deserializeHTMLNode';\n\n/**\n * Deserialize HTML element.\n */\nexport const deserializeHTMLElement = <T = {}>(\n  editor: PlateEditor<T>,\n  {\n    plugins,\n    element,\n  }: {\n    plugins: PlatePlugin<T>[];\n    element: HTMLElement;\n  }\n): DeserializeHTMLReturn => {\n  return deserializeHTMLNode(editor, plugins)(element);\n};\n","import { normalizeDescendantsToDocumentFragment } from '@udecode/plate-common';\nimport { PlateEditor, PlatePlugin, TDescendant } from '@udecode/plate-core';\nimport { htmlStringToDOMNode } from '../../serializer/utils/htmlStringToDOMNode';\nimport { deserializeHTMLElement } from './deserializeHTMLElement';\n\n/**\n * Deserialize HTML element to a valid document fragment.\n */\nexport const deserializeHTMLToDocumentFragment = <T = {}>(\n  editor: PlateEditor<T>,\n  {\n    plugins,\n    element,\n    stripWhitespace = true,\n  }: {\n    plugins: PlatePlugin<T>[];\n    element: HTMLElement | string;\n    stripWhitespace?: boolean;\n  }\n): TDescendant[] => {\n  if (typeof element === 'string') {\n    element = htmlStringToDOMNode(element, stripWhitespace);\n  }\n\n  const fragment = deserializeHTMLElement(editor, {\n    plugins,\n    element,\n  }) as TDescendant[];\n\n  return normalizeDescendantsToDocumentFragment(editor, {\n    descendants: fragment,\n  });\n};\n","import {\n  getPlatePluginWithOverrides,\n  PlatePlugin,\n  WithOverride,\n} from '@udecode/plate-core';\nimport {\n  insertDeserializedFragment,\n  isDeserializerEnabled,\n} from '@udecode/plate-serializer';\nimport { deserializeHTMLToDocumentFragment } from './utils/deserializeHTMLToDocumentFragment';\n\nexport interface WithDeserializeHTMLOptions {\n  plugins?: PlatePlugin[];\n}\n\nexport const htmlDeserializerId = 'HTML Deserializer';\n\n/**\n * Enables support for deserializing inserted content from HTML format to Slate format.\n */\nexport const withDeserializeHTML = ({\n  plugins = [],\n}: WithDeserializeHTMLOptions = {}): WithOverride => (editor) => {\n  const { insertData } = editor;\n\n  editor.insertData = (data: DataTransfer) => {\n    const html = data.getData('text/html');\n\n    const isEnabled = isDeserializerEnabled(\n      editor,\n      plugins,\n      htmlDeserializerId\n    );\n\n    if (html && isEnabled) {\n      const { body } = new DOMParser().parseFromString(html, 'text/html');\n\n      const fragment = deserializeHTMLToDocumentFragment(editor, {\n        plugins,\n        element: body,\n      });\n\n      if (fragment.length) {\n        return insertDeserializedFragment(editor, { fragment, plugins });\n      }\n    }\n\n    insertData(data);\n  };\n\n  return editor;\n};\n\n/**\n * @see {@link withDeserializeHTML}\n */\nexport const createDeserializeHTMLPlugin = getPlatePluginWithOverrides(\n  withDeserializeHTML\n);\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n","var isArray = require('./isArray');\n\n/**\n * Casts `value` as an array if it's not one.\n *\n * @static\n * @memberOf _\n * @since 4.4.0\n * @category Lang\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast array.\n * @example\n *\n * _.castArray(1);\n * // => [1]\n *\n * _.castArray({ 'a': 1 });\n * // => [{ 'a': 1 }]\n *\n * _.castArray('abc');\n * // => ['abc']\n *\n * _.castArray(null);\n * // => [null]\n *\n * _.castArray(undefined);\n * // => [undefined]\n *\n * _.castArray();\n * // => []\n *\n * var array = [1, 2, 3];\n * console.log(_.castArray(array) === array);\n * // => true\n */\nfunction castArray() {\n  if (!arguments.length) {\n    return [];\n  }\n  var value = arguments[0];\n  return isArray(value) ? value : [value];\n}\n\nmodule.exports = castArray;\n","import { renderToStaticMarkup } from 'react-dom/server';\nimport { createElementWithSlate } from '@udecode/plate-common';\nimport {\n  pipeOverrideProps,\n  PlateEditor,\n  PlatePlugin,\n  PlateRenderElementProps,\n  PlateRenderLeafProps,\n  SlateProps,\n  TDescendant,\n} from '@udecode/plate-core';\nimport castArray from 'lodash/castArray';\nimport { Text } from 'slate';\n\n// Remove extra whitespace generated by ReactDOMServer\nconst trimWhitespace = (rawHtml: string): string =>\n  rawHtml.replace(/(\\r\\n|\\n|\\r|\\t)/gm, '');\n\n// Remove redundant data attributes\nconst stripSlateDataAttributes = (rawHtml: string): string =>\n  rawHtml\n    .replace(/( data-slate)(-node|-type|-leaf)=\"[^\"]+\"/gm, '')\n    .replace(/( data-testid)=\"[^\"]+\"/gm, '');\n\n/**\n * Remove all class names that do not start with one of preserveClassNames (`slate-` by default)\n */\nconst stripClassNames = (\n  html: string,\n  { preserveClassNames = ['slate-'] }: { preserveClassNames?: string[] }\n) => {\n  const allClasses = html.split(/(class=\"[^\"]*\")/g);\n\n  let filteredHtml = '';\n  allClasses.forEach((item, index) => {\n    if (index % 2 === 0) {\n      return (filteredHtml += item);\n    }\n    const preserveRegExp = new RegExp(\n      preserveClassNames.map((cn) => `${cn}[^\"\\\\s]*`).join('|'),\n      'g'\n    );\n    const slateClassNames = item.match(preserveRegExp);\n    if (slateClassNames) {\n      filteredHtml += `class=\"${slateClassNames.join(' ')}\"`;\n    }\n  });\n\n  return filteredHtml;\n};\n\nconst getNode = (\n  editor: PlateEditor,\n  {\n    plugins,\n    elementProps,\n    slateProps,\n    preserveClassNames,\n  }: {\n    plugins: PlatePlugin[];\n    elementProps: PlateRenderElementProps;\n    slateProps?: Partial<SlateProps>;\n    preserveClassNames?: string[];\n  }\n) => {\n  // If no type provided we wrap children with div tag\n  if (!elementProps.element.type) {\n    return `<div>${elementProps.children}</div>`;\n  }\n\n  let html: string | undefined;\n\n  const overriders = plugins.flatMap((plugin) =>\n    castArray(plugin.overrideProps).flatMap((cb) => cb?.(editor) ?? [])\n  );\n\n  elementProps = pipeOverrideProps(elementProps, overriders);\n\n  // Search for matching plugin based on element type\n  plugins.some((plugin) => {\n    if (!plugin.serialize?.element && !plugin.renderElement) return false;\n\n    if (\n      !plugin\n        .deserialize?.(editor)\n        .element?.some(\n          (item) => item.type === String(elementProps.element.type)\n        )\n    ) {\n      html = `<div>${elementProps.children}</div>`;\n      return false;\n    }\n\n    // Render element using picked plugins renderElement function and ReactDOM\n    html = renderToStaticMarkup(\n      createElementWithSlate({\n        ...slateProps,\n        children:\n          plugin.serialize?.element?.(elementProps) ??\n          plugin.renderElement?.(editor)(elementProps),\n      })\n    );\n\n    html = stripClassNames(html, { preserveClassNames });\n\n    return true;\n  });\n\n  return html;\n};\n\nconst getLeaf = (\n  editor: PlateEditor,\n  {\n    plugins,\n    leafProps,\n    slateProps,\n    preserveClassNames,\n  }: {\n    plugins: PlatePlugin[];\n    leafProps: PlateRenderLeafProps;\n    slateProps?: Partial<SlateProps>;\n    preserveClassNames?: string[];\n  }\n) => {\n  const { children } = leafProps;\n\n  const overriders = plugins.flatMap((p) =>\n    castArray(p.overrideProps).flatMap((cb) => cb?.(editor) ?? [])\n  );\n\n  return plugins.reduce((result, plugin) => {\n    if (!plugin.serialize?.leaf && !plugin.renderLeaf) return result;\n    if (\n      (plugin.serialize?.leaf?.(leafProps) ??\n        plugin.renderLeaf?.(editor)(leafProps)) === children\n    )\n      return result;\n\n    leafProps = {\n      ...pipeOverrideProps(leafProps, overriders),\n      children: encodeURIComponent(result),\n    };\n\n    let html = decodeURIComponent(\n      renderToStaticMarkup(\n        createElementWithSlate({\n          ...slateProps,\n          children:\n            plugin.serialize?.leaf?.(leafProps) ??\n            plugin.renderLeaf?.(editor)(leafProps),\n        })\n      )\n    );\n\n    html = stripClassNames(html, { preserveClassNames });\n\n    return html;\n  }, children);\n};\n\nconst isEncoded = (str = '') => {\n  try {\n    return str !== decodeURIComponent(str);\n  } catch (error) {\n    return false;\n  }\n};\n\n/**\n * Convert Slate Nodes into HTML string\n */\nexport const serializeHTMLFromNodes = (\n  editor: PlateEditor,\n  {\n    plugins,\n    nodes,\n    slateProps,\n    stripDataAttributes = true,\n    preserveClassNames,\n    stripWhitespace = true,\n  }: {\n    /**\n     * Plugins with renderElement or renderLeaf.\n     */\n    plugins: PlatePlugin[];\n\n    /**\n     * Slate nodes to convert to HTML.\n     */\n    nodes: TDescendant[];\n\n    /**\n     * Enable stripping data attributes\n     */\n    stripDataAttributes?: boolean;\n\n    /**\n     * List of className prefixes to preserve from being stripped out\n     */\n    preserveClassNames?: string[];\n\n    /**\n     * Slate props to provide if the rendering depends on slate hooks\n     */\n    slateProps?: Partial<SlateProps>;\n\n    /**\n     * Whether stripping whitespaces from serialized HTML\n     * @default true\n     */\n    stripWhitespace?: boolean;\n  }\n): string => {\n  let result = nodes\n    .map((node) => {\n      if (Text.isText(node)) {\n        return getLeaf(editor, {\n          plugins,\n          leafProps: {\n            leaf: node,\n            text: node,\n            children: isEncoded(node.text)\n              ? node.text\n              : encodeURIComponent(node.text),\n            attributes: { 'data-slate-leaf': true },\n            editor,\n            plugins,\n          },\n          slateProps,\n          preserveClassNames,\n        });\n      }\n\n      return getNode(editor, {\n        plugins,\n        elementProps: {\n          element: node,\n          children: encodeURIComponent(\n            serializeHTMLFromNodes(editor, {\n              plugins,\n              nodes: node.children,\n              preserveClassNames,\n              stripWhitespace,\n            })\n          ) as any,\n          attributes: { 'data-slate-node': 'element', ref: null },\n          editor,\n          plugins,\n        },\n        slateProps,\n        preserveClassNames,\n      });\n    })\n    .join('');\n\n  if (isEncoded(result)) {\n    result = decodeURIComponent(result);\n  }\n\n  if (stripWhitespace) {\n    result = trimWhitespace(result);\n  }\n\n  if (stripDataAttributes) {\n    result = stripSlateDataAttributes(result);\n  }\n\n  return result;\n};\n"],"names":["htmlStringToDOMNode","rawHtml","stripWhitespace","node","document","createElement","innerHTML","replace","deserializeHTMLToBreak","nodeName","deserializeHTMLToElement","editor","plugins","element","children","slateElement","withoutChildren","some","deserialize","pluginDeserializers","elementDeserializers","deserializer","deserialized","descendants","length","text","jsx","deserializeHTMLToFragment","deserializeHTMLToMarks","leaf","forEach","leafDeserializers","leafPart","reduce","arr","child","isElement","Object","keys","mergeDeepToNodes","source","query","filter","n","Text","isText","push","deserializeHTMLToText","nodeType","Node","TEXT_NODE","nodeValue","textContent","deserializeHTMLNode","textNode","ELEMENT_NODE","htmlElement","breakLine","parent","childNodes","Array","from","map","flat","fragment","deserializeHTMLElement","deserializeHTMLToDocumentFragment","normalizeDescendantsToDocumentFragment","htmlDeserializerId","withDeserializeHTML","insertData","data","html","getData","isEnabled","isDeserializerEnabled","body","DOMParser","parseFromString","insertDeserializedFragment","createDeserializeHTMLPlugin","getPlatePluginWithOverrides","isArray","trimWhitespace","stripSlateDataAttributes","stripClassNames","preserveClassNames","allClasses","split","filteredHtml","item","index","preserveRegExp","RegExp","cn","join","slateClassNames","match","getNode","elementProps","slateProps","type","overriders","flatMap","plugin","castArray","overrideProps","cb","pipeOverrideProps","serialize","renderElement","String","renderToStaticMarkup","createElementWithSlate","getLeaf","leafProps","p","result","renderLeaf","encodeURIComponent","decodeURIComponent","isEncoded","str","error","serializeHTMLFromNodes","nodes","stripDataAttributes","attributes","ref"],"mappings":"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"}