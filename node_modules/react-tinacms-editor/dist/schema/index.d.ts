/**

Copyright 2021 Forestry.io Holdings, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

*/
import { Schema } from 'prosemirror-model';
export declare const marks: {
    code: {
        parseDOM: {
            tag: string;
        }[];
        toDOM(): string[];
        excludes: string;
    };
    em: {
        parseDOM: ({
            tag: string;
            style?: undefined;
            getAttrs?: undefined;
        } | {
            style: string;
            getAttrs: (value: string) => boolean;
            tag?: undefined;
        })[];
        toDOM(): string[];
        excludes: string;
    };
    link: {
        attrs: {
            href: {};
            title: {
                default: any;
            };
        };
        inclusive: boolean;
        parseDOM: {
            tag: string;
            getAttrs(dom: HTMLElement): {
                href: string;
                title: string;
            };
        }[];
        toDOM(node: import("prosemirror-model").Node<any>): (string | {
            [key: string]: any;
        })[];
        toDocument(node: import("prosemirror-model").Node<any>): (string | {
            [key: string]: any;
        })[];
    };
    strike: {
        parseDOM: ({
            tag: string;
            style?: undefined;
            getAttrs?: undefined;
        } | {
            style: string;
            getAttrs: (value: string) => any;
            tag?: undefined;
        })[];
        toDOM: () => (string | number)[];
        excludes: string;
    };
    strong: {
        parseDOM: ({
            tag: string;
            getAttrs?: undefined;
            style?: undefined;
        } | {
            tag: string;
            getAttrs: (node: HTMLElement) => any;
            style?: undefined;
        } | {
            style: string;
            getAttrs: (value: string) => any;
            tag?: undefined;
        })[];
        toDOM(): string[];
        excludes: string;
    };
};
export declare const nodes: {
    table: any;
    table_row: any;
    table_cell: any;
    table_header: any;
    doc: {
        content: string;
    };
    paragraph: {
        content: string;
        marks: string;
        attrs: {
            class: {
                default: string;
            };
            id: {
                default: string;
            };
        };
        group: string;
        parseDOM: {
            tag: string;
            getAttrs: typeof import("./nodes/utils").getAttrs;
        }[];
        toDocument(node: import("prosemirror-model").Node<any>): any[];
        toDOM(node: import("prosemirror-model").Node<any>): any[];
    };
    blockquote: {
        content: string;
        group: string;
        defining: boolean;
        parseDOM: {
            tag: string;
        }[];
        toDOM(): (string | number)[];
    };
    bullet_list: {
        content: string;
        group: string;
        attrs: {
            tight: {
                default: boolean;
            };
        };
        parseDOM: {
            tag: string;
            getAttrs: (dom: Element) => {
                tight: boolean;
            };
        }[];
        toDOM(node: import("prosemirror-model").Node<any>): (string | number | {
            'data-tight': string;
        })[];
    };
    code_block: {
        content: string;
        attrs: {
            params: {
                default: string;
            };
        };
        group: string;
        code: boolean;
        defining: boolean;
        parseDOM: {
            tag: string;
            preserveWhitespace: string;
            getAttrs: (dom: Element) => {
                params: string;
            };
        }[];
        toDOM(node: import("prosemirror-model").Node<any>): (string | (string | number)[] | {
            'data-params': any;
        })[];
    };
    hard_break: {
        inline: boolean;
        group: string;
        selectable: boolean;
        parseDOM: {
            tag: string;
        }[];
        toDOM(): string[];
    };
    heading: {
        attrs: {
            level: {
                default: number;
            };
            class: {
                default: string;
            };
            id: {
                default: string;
            };
        };
        content: string;
        marks: string;
        group: string;
        defining: boolean;
        parseDOM: {
            tag: string;
            getAttrs: (dom: HTMLElement) => any;
        }[];
        toDocument(node: import("prosemirror-model").Node<any>): any[];
        toDOM(node: import("prosemirror-model").Node<any>): any[];
    };
    horizontal_rule: {
        group: string;
        allowGapCursor: boolean;
        parseDOM: {
            tag: string;
        }[];
        toDOM(): string[];
    };
    image: {
        inline: boolean;
        attrs: {
            src: {};
            align: {
                default: any;
            };
            alt: {
                default: any;
            };
            title: {
                default: any;
            };
            width: {
                default: any;
            };
            height: {
                default: any;
            };
        };
        group: string;
        draggable: boolean;
        allowGapCursor: boolean;
        parseDOM: {
            tag: string;
            getAttrs(dom: HTMLElement): {
                src: string;
                title: string;
                alt: string;
                align: string;
                width: string;
                height: string;
            };
        }[];
        toDOM(node: import("prosemirror-model").Node<any>): any[];
    };
    list_item: {
        content: string;
        defining: boolean;
        parseDOM: {
            tag: string;
        }[];
        toDOM(): (string | number)[];
    };
    ordered_list: {
        content: string;
        group: string;
        attrs: {
            order: {
                default: number;
            };
            tight: {
                default: boolean;
            };
        };
        parseDOM: {
            tag: string;
            getAttrs(dom: Element): {
                order: number;
                tight: boolean;
            };
        }[];
        toDOM(node: import("prosemirror-model").Node<any>): (string | number | {
            start: any;
            'data-tight': string;
        })[];
    };
    text: {
        group: string;
    };
};
export declare const buildSchema: () => Schema<any, any>;
