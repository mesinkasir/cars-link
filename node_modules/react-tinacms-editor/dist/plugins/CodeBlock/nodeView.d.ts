/**

Copyright 2021 Forestry.io Holdings, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

*/
import { Node } from 'prosemirror-model';
import { Selection } from 'prosemirror-state';
import { EditorView, NodeView } from 'prosemirror-view';
declare type CodeMirrorEditor = any;
export declare class CodeBlockView implements NodeView {
    protected node: Node;
    protected view: EditorView;
    protected getPos: () => number;
    cm: CodeMirrorEditor;
    dom?: HTMLElement;
    updating: boolean;
    constructor(node: Node, view: EditorView, getPos: () => number);
    onCursorActivity: () => void;
    /**
     * When CodeMirror's Selection is changed, a transaction is dispatched to
     * update the ProseMirror editor's Selection.
     */
    forwardSelection: () => void;
    onChange: () => void;
    /**
     * If the code block is changed, a ProseMirror transaction is dispatched
     * to keep the two editors in sync.
     */
    valueChanged(): void;
    /**
     * Creates a ProseMirror TextSelection based off the CodeMirror selection.
     */
    asProseMirrorSelection(doc: Node): Selection;
    /**
     * Set's the CodeMirror selection given the anchor and head.
     */
    setSelection(anchor: number, head: number): void;
    /**
     * Creates a new instance of CodeMirror from a ProseMirror Node
     */
    setupCodeMirror(node: Node): CodeMirrorEditor;
    /**
     * Generates a Keymap for the CodeMirror instance.
     */
    codeMirrorKeymap(): any;
    maybeEscape(unit: string, dir: number): any;
    /**
     * When the Prosemirror Node is updated, compute the change between the
     * ProseMirror and CodeMirror. Then update CodeMirror to match ProseMirror.
     */
    update(node: Node): boolean;
    /**
     * Called by ProseMirror when the CodeView is clicked.
     */
    selectNode(): void;
    /**
     * Prevents Events in here from bubbling.
     */
    stopEvent(): boolean;
}
export {};
