/**

Copyright 2021 Forestry.io Holdings, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

*/
import { Node, Schema, Mark } from 'prosemirror-model';
import { EditorState, Transaction } from 'prosemirror-state';
interface Dispatch {
    (tr: Transaction): void;
}
export interface Command {
    (state: EditorState, dispatch: Dispatch | null, ...args: any[]): boolean | Transaction | null;
}
interface LinkAttrs {
    href: string;
    title?: string;
}
interface ImageAttrs {
    src: string;
    title?: string;
    alt?: string;
    align?: 'left' | 'right' | 'center' | '';
}
export declare class PMTestHarness {
    private schema;
    private state;
    constructor(schema: Schema);
    private setDoc;
    private get nodes();
    private get marks();
    forDoc: (doc: Node) => this;
    withTextSelection: (from: number, to?: number) => this;
    withNodeSelection: (at: number) => this;
    apply: (command: Command, ...args: any[]) => this;
    expect: (result: Node) => this;
    shouldNotRun: (command: Command, ...args: any[]) => void;
    /**
     * Creates a new `doc` node with the given content.
     */
    doc: (...content: Node[]) => Node;
    /**
     * Creates a new `paragraph` node with the given content.
     */
    p: (...content: Node[]) => any;
    /**
     * Creates a new `ordered list` node with the given content.
     */
    orderedList: (...content: Node[]) => any;
    /**
     * Creates a new `bullet List` node with the given content.
     */
    bulletList: (...content: Node[]) => any;
    /**
     * Creates a new `block quote` node with the given content.
     */
    blockquote: (...content: Node[]) => any;
    /**
     * Creates a new `text` node with a `link` mark.
     */
    link: (content: string, attrs: LinkAttrs) => any;
    strong: (content: string) => any;
    em: (content: string) => any;
    /**
     * Creates a new `text` node with the given marks.
     */
    text: (content: string, marks?: Mark[]) => any;
    image: (attrs: ImageAttrs) => any;
    hr: () => any;
    heading: (level: number, ...nodes: Node[]) => any;
}
export {};
