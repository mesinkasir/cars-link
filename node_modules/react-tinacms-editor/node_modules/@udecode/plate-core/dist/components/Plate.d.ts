import React from 'react';
import { PlateStoreState } from '../types/PlateStore';
export interface PlateProps<T = {}> extends Partial<Omit<PlateStoreState<T>, 'keyEditor' | 'keyPlugins' | 'keySelection'>> {
    /**
     * The children rendered inside `Slate` before the `Editable` component.
     */
    children?: React.ReactNode;
    /**
     * If `true`, disable all the core plugins.
     * If an object, disable the core plugin properties that are `true` in the object.
     */
    disableCorePlugins?: {
        deserializeAst?: boolean;
        deserializeHtml?: boolean;
        eventEditor?: boolean;
        inlineVoid?: boolean;
        insertData?: boolean;
        history?: boolean;
        react?: boolean;
    } | boolean;
    /**
     * Initial value of the editor.
     * @default [{ children: [{ text: '' }]}]
     */
    initialValue?: PlateStoreState['value'];
    /**
     * When `true`, it will normalize the initial value passed to the `editor` once it gets created.
     * This is useful when adding normalization rules on already existing content.
     * @default false
     */
    normalizeInitialValue?: boolean;
    /**
     * Custom `Editable` node.
     */
    renderEditable?: (editable: React.ReactNode) => React.ReactNode;
}
export declare const PlateContent: <T extends {} = {}>({ children, renderEditable, ...options }: PlateProps<T>) => JSX.Element | null;
export declare const Plate: <T extends {} = {}>(props: PlateProps<T>) => JSX.Element | null;
//# sourceMappingURL=Plate.d.ts.map