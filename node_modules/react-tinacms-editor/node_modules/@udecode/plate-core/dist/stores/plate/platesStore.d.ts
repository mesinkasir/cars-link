import { PlatesStoreState } from '../../types/PlateStore';
/**
 * Plates store.
 */
export declare const platesStore: import("@udecode/zustood").StoreApi<"plate", PlatesStoreState, import("@udecode/zustood").SetRecord<PlatesStoreState> & {
    state: import("@udecode/zustood").SetImmerState<PlatesStoreState>;
    mergeState: import("@udecode/zustood").MergeState<PlatesStoreState>;
} & {
    /**
     * Set state by id. Called by `Plate` on mount.
     */
    set: (id: string) => void;
    /**
     * Remove state by id. Called by `Plate` on unmount.
     */
    unset: (id: string) => void;
}, {
    get(id: string): import("@udecode/zustood").StoreApi<`plate-${string}`, import("../../types/PlateStore").PlateStoreState<{}>, import("@udecode/zustood").SetRecord<import("../../types/PlateStore").PlateStoreState<{}>> & {
        state: import("@udecode/zustood").SetImmerState<import("../../types/PlateStore").PlateStoreState<{}>>;
        mergeState: import("@udecode/zustood").MergeState<import("../../types/PlateStore").PlateStoreState<{}>>;
    } & {
        resetEditor: () => void;
        incrementKey: (key: import("../../types/PlateStore").PlateChangeKey) => void;
    }, {}>;
    has(id: string): boolean;
}>;
export declare const platesActions: import("@udecode/zustood").SetRecord<PlatesStoreState> & {
    state: import("@udecode/zustood").SetImmerState<PlatesStoreState>;
    mergeState: import("@udecode/zustood").MergeState<PlatesStoreState>;
} & {
    /**
     * Set state by id. Called by `Plate` on mount.
     */
    set: (id: string) => void;
    /**
     * Remove state by id. Called by `Plate` on unmount.
     */
    unset: (id: string) => void;
};
export declare const platesSelectors: import("@udecode/zustood").StoreApiGet<PlatesStoreState, {
    get(id: string): import("@udecode/zustood").StoreApi<`plate-${string}`, import("../../types/PlateStore").PlateStoreState<{}>, import("@udecode/zustood").SetRecord<import("../../types/PlateStore").PlateStoreState<{}>> & {
        state: import("@udecode/zustood").SetImmerState<import("../../types/PlateStore").PlateStoreState<{}>>;
        mergeState: import("@udecode/zustood").MergeState<import("../../types/PlateStore").PlateStoreState<{}>>;
    } & {
        resetEditor: () => void;
        incrementKey: (key: import("../../types/PlateStore").PlateChangeKey) => void;
    }, {}>;
    has(id: string): boolean;
}>;
export declare const usePlatesSelectors: import("@udecode/zustood").StoreApiUse<PlatesStoreState, {
    get(id: string): import("@udecode/zustood").StoreApi<`plate-${string}`, import("../../types/PlateStore").PlateStoreState<{}>, import("@udecode/zustood").SetRecord<import("../../types/PlateStore").PlateStoreState<{}>> & {
        state: import("@udecode/zustood").SetImmerState<import("../../types/PlateStore").PlateStoreState<{}>>;
        mergeState: import("@udecode/zustood").MergeState<import("../../types/PlateStore").PlateStoreState<{}>>;
    } & {
        resetEditor: () => void;
        incrementKey: (key: import("../../types/PlateStore").PlateChangeKey) => void;
    }, {}>;
    has(id: string): boolean;
}>;
export declare const getPlateActions: (id?: string | undefined) => import("@udecode/zustood").SetRecord<import("../../types/PlateStore").PlateStoreState<{}>> & {
    state: import("@udecode/zustood").SetImmerState<import("../../types/PlateStore").PlateStoreState<{}>>;
    mergeState: import("@udecode/zustood").MergeState<import("../../types/PlateStore").PlateStoreState<{}>>;
} & {
    resetEditor: () => void;
    incrementKey: (key: import("../../types/PlateStore").PlateChangeKey) => void;
};
export declare const getPlateSelectors: (id?: string | undefined) => import("@udecode/zustood").StoreApiGet<import("../../types/PlateStore").PlateStoreState<{}>, {}>;
export declare const usePlateSelectors: (id?: string | undefined) => import("@udecode/zustood").GetRecord<import("../../types/PlateStore").PlateStoreState<{}>>;
//# sourceMappingURL=platesStore.d.ts.map