/**

Copyright 2021 Forestry.io Holdings, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

*/
export declare class GitClient {
    private baseUrl;
    constructor(baseUrl: string);
    /**
     * An alias to `commit`
     *
     * @deprecated
     */
    onSubmit(data: any): Promise<any>;
    /**
     * An alias to `writeToDisk`
     *
     * @deprecated
     */
    onChange(data: any): Promise<any>;
    /**
     * An alias to `writeMediaToDisk`
     *
     * @deprecated
     */
    onUploadMedia(data: any): Promise<any>;
    /**
     * An alias to `deleteFromDisk`
     *
     * @deprecated
     */
    onDelete(data: any): Promise<any>;
    /**
     * @deprecated
     */
    isAuthenticated(): boolean;
    commit(data: {
        files: string[];
        message?: string;
        name?: string;
        email?: string;
    }): Promise<Response>;
    /**
     *
     * TODO: Add return type.
     * TODO: Remove `catch`
     */
    push(): Promise<any>;
    /**
     *
     * TODO: Add return type.
     * TODO: Remove `catch`
     */
    writeToDisk(data: {
        fileRelativePath: string;
        content: string;
    }): Promise<any>;
    /**
     * Uploads a File to disk
     * TODO: Remove `catch`
     */
    writeMediaToDisk(data: {
        directory: string;
        content: File;
    }): Promise<any>;
    /**
     * TODO: rename `data.relPath` to `data.fileRelativePath`
     * TODO: Add return type.
     * TODO: Remove `catch`
     */
    deleteFromDisk(data: {
        relPath: string;
    }): Promise<any>;
    /**
     * Resets the given files.
     */
    reset(data: {
        files: string[];
    }): Promise<Response>;
    /**
     * Get the contents of a file or directory on disk.
     */
    getFile(fileRelativePath: string): Promise<any>;
    /**
     * Get the contents of a file for the most recent commit.
     */
    show(fileRelativePath: string): Promise<any>;
    /**
     * Get information about a local branch by name, or the current branch if no
     * name is specified.
     */
    branch(name?: string): Promise<any>;
    /**
     * Get a list of the names of all local branches.
     */
    branches(): Promise<any>;
}
