/**

Copyright 2021 Forestry.io Holdings, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

*/
import React from 'react';
import type { MdxTemplate } from '../../types';
declare type TemplateType = MdxTemplate;
export declare type Dispatch = React.Dispatch<Action>;
export declare type State = {
    initialTemplates: TemplateType[];
    activeIndex: number;
    activeTemplates: TemplateType[];
    value: string;
    status: 'pending' | 'selected' | 'cancelled';
};
declare type Action = {
    type: 'selectItem';
    value: number;
} | {
    type: 'selectCurrentItem';
} | {
    type: 'updateValue';
    value: string;
} | {
    type: 'move';
    value: 'up' | 'down';
};
/**
 * This could (should?) be replaced by something like downshift, but in some
 * ways it's not like a traditional combobox because so much of what's needed
 * here should _not_ steal focus from the editor. Some of the combobox libraries
 * I've tried really shine when it comes to accessibility out-of-the-box which is
 * sort of the opposite of what we want here. I'm not sure of the best way to make
 * this accessible, but I have a feeling the plate combobox is the way to go.
 * At first glance, there's very little documentation for using it, though it
 * does seem to support bringing out own UI (it uses downshift).
 */
export declare function SearchAutocomplete(props: {
    value: string;
    onValue: (value: {
        name: string;
        inline?: boolean;
    }) => void;
    onCancel: () => void;
}): JSX.Element;
export {};
